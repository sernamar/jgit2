// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int version;
 *     int quiet;
 *     int inmemory;
 *     const char *rewrite_notes_ref;
 *     git_merge_options merge_options;
 *     git_checkout_options checkout_options;
 *     git_commit_create_cb commit_create_cb;
 *     int (*signing_cb)(git_buf *, git_buf *, const char *, void *);
 *     void *payload;
 * }
 * }
 */
public class git_rebase_options {

    git_rebase_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("quiet"),
        git2.C_INT.withName("inmemory"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("rewrite_notes_ref"),
        git_merge_options.layout().withName("merge_options"),
        git_checkout_options.layout().withName("checkout_options"),
        git2.C_POINTER.withName("commit_create_cb"),
        git2.C_POINTER.withName("signing_cb"),
        git2.C_POINTER.withName("payload")
    ).withName("$anon$32:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt quiet$LAYOUT = (OfInt)$LAYOUT.select(groupElement("quiet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int quiet
     * }
     */
    public static final OfInt quiet$layout() {
        return quiet$LAYOUT;
    }

    private static final long quiet$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int quiet
     * }
     */
    public static final long quiet$offset() {
        return quiet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int quiet
     * }
     */
    public static int quiet(MemorySegment struct) {
        return struct.get(quiet$LAYOUT, quiet$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int quiet
     * }
     */
    public static void quiet(MemorySegment struct, int fieldValue) {
        struct.set(quiet$LAYOUT, quiet$OFFSET, fieldValue);
    }

    private static final OfInt inmemory$LAYOUT = (OfInt)$LAYOUT.select(groupElement("inmemory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int inmemory
     * }
     */
    public static final OfInt inmemory$layout() {
        return inmemory$LAYOUT;
    }

    private static final long inmemory$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int inmemory
     * }
     */
    public static final long inmemory$offset() {
        return inmemory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int inmemory
     * }
     */
    public static int inmemory(MemorySegment struct) {
        return struct.get(inmemory$LAYOUT, inmemory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int inmemory
     * }
     */
    public static void inmemory(MemorySegment struct, int fieldValue) {
        struct.set(inmemory$LAYOUT, inmemory$OFFSET, fieldValue);
    }

    private static final AddressLayout rewrite_notes_ref$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rewrite_notes_ref"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *rewrite_notes_ref
     * }
     */
    public static final AddressLayout rewrite_notes_ref$layout() {
        return rewrite_notes_ref$LAYOUT;
    }

    private static final long rewrite_notes_ref$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *rewrite_notes_ref
     * }
     */
    public static final long rewrite_notes_ref$offset() {
        return rewrite_notes_ref$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *rewrite_notes_ref
     * }
     */
    public static MemorySegment rewrite_notes_ref(MemorySegment struct) {
        return struct.get(rewrite_notes_ref$LAYOUT, rewrite_notes_ref$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *rewrite_notes_ref
     * }
     */
    public static void rewrite_notes_ref(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rewrite_notes_ref$LAYOUT, rewrite_notes_ref$OFFSET, fieldValue);
    }

    private static final GroupLayout merge_options$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("merge_options"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_merge_options merge_options
     * }
     */
    public static final GroupLayout merge_options$layout() {
        return merge_options$LAYOUT;
    }

    private static final long merge_options$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_merge_options merge_options
     * }
     */
    public static final long merge_options$offset() {
        return merge_options$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_merge_options merge_options
     * }
     */
    public static MemorySegment merge_options(MemorySegment struct) {
        return struct.asSlice(merge_options$OFFSET, merge_options$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_merge_options merge_options
     * }
     */
    public static void merge_options(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, merge_options$OFFSET, merge_options$LAYOUT.byteSize());
    }

    private static final GroupLayout checkout_options$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("checkout_options"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_checkout_options checkout_options
     * }
     */
    public static final GroupLayout checkout_options$layout() {
        return checkout_options$LAYOUT;
    }

    private static final long checkout_options$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_checkout_options checkout_options
     * }
     */
    public static final long checkout_options$offset() {
        return checkout_options$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_checkout_options checkout_options
     * }
     */
    public static MemorySegment checkout_options(MemorySegment struct) {
        return struct.asSlice(checkout_options$OFFSET, checkout_options$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_checkout_options checkout_options
     * }
     */
    public static void checkout_options(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, checkout_options$OFFSET, checkout_options$LAYOUT.byteSize());
    }

    private static final AddressLayout commit_create_cb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("commit_create_cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_commit_create_cb commit_create_cb
     * }
     */
    public static final AddressLayout commit_create_cb$layout() {
        return commit_create_cb$LAYOUT;
    }

    private static final long commit_create_cb$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_commit_create_cb commit_create_cb
     * }
     */
    public static final long commit_create_cb$offset() {
        return commit_create_cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_commit_create_cb commit_create_cb
     * }
     */
    public static MemorySegment commit_create_cb(MemorySegment struct) {
        return struct.get(commit_create_cb$LAYOUT, commit_create_cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_commit_create_cb commit_create_cb
     * }
     */
    public static void commit_create_cb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(commit_create_cb$LAYOUT, commit_create_cb$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*signing_cb)(git_buf *, git_buf *, const char *, void *)
     * }
     */
    public static class signing_cb {

        signing_cb() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            git2.C_INT,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(signing_cb.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(signing_cb.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout signing_cb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("signing_cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*signing_cb)(git_buf *, git_buf *, const char *, void *)
     * }
     */
    public static final AddressLayout signing_cb$layout() {
        return signing_cb$LAYOUT;
    }

    private static final long signing_cb$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*signing_cb)(git_buf *, git_buf *, const char *, void *)
     * }
     */
    public static final long signing_cb$offset() {
        return signing_cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*signing_cb)(git_buf *, git_buf *, const char *, void *)
     * }
     */
    public static MemorySegment signing_cb(MemorySegment struct) {
        return struct.get(signing_cb$LAYOUT, signing_cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*signing_cb)(git_buf *, git_buf *, const char *, void *)
     * }
     */
    public static void signing_cb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(signing_cb$LAYOUT, signing_cb$OFFSET, fieldValue);
    }

    private static final AddressLayout payload$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("payload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static final AddressLayout payload$layout() {
        return payload$LAYOUT;
    }

    private static final long payload$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static final long payload$offset() {
        return payload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static MemorySegment payload(MemorySegment struct) {
        return struct.get(payload$LAYOUT, payload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static void payload(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(payload$LAYOUT, payload$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

