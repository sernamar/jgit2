// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct git_worktree_add_options {
 *     unsigned int version;
 *     int lock;
 *     int checkout_existing;
 *     git_reference *ref;
 *     git_checkout_options checkout_options;
 * }
 * }
 */
public class git_worktree_add_options {

    git_worktree_add_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("lock"),
        git2.C_INT.withName("checkout_existing"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("ref"),
        git_checkout_options.layout().withName("checkout_options")
    ).withName("git_worktree_add_options");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt lock$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int lock
     * }
     */
    public static final OfInt lock$layout() {
        return lock$LAYOUT;
    }

    private static final long lock$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int lock
     * }
     */
    public static final long lock$offset() {
        return lock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int lock
     * }
     */
    public static int lock(MemorySegment struct) {
        return struct.get(lock$LAYOUT, lock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int lock
     * }
     */
    public static void lock(MemorySegment struct, int fieldValue) {
        struct.set(lock$LAYOUT, lock$OFFSET, fieldValue);
    }

    private static final OfInt checkout_existing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("checkout_existing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int checkout_existing
     * }
     */
    public static final OfInt checkout_existing$layout() {
        return checkout_existing$LAYOUT;
    }

    private static final long checkout_existing$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int checkout_existing
     * }
     */
    public static final long checkout_existing$offset() {
        return checkout_existing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int checkout_existing
     * }
     */
    public static int checkout_existing(MemorySegment struct) {
        return struct.get(checkout_existing$LAYOUT, checkout_existing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int checkout_existing
     * }
     */
    public static void checkout_existing(MemorySegment struct, int fieldValue) {
        struct.set(checkout_existing$LAYOUT, checkout_existing$OFFSET, fieldValue);
    }

    private static final AddressLayout ref$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ref"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_reference *ref
     * }
     */
    public static final AddressLayout ref$layout() {
        return ref$LAYOUT;
    }

    private static final long ref$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_reference *ref
     * }
     */
    public static final long ref$offset() {
        return ref$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_reference *ref
     * }
     */
    public static MemorySegment ref(MemorySegment struct) {
        return struct.get(ref$LAYOUT, ref$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_reference *ref
     * }
     */
    public static void ref(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ref$LAYOUT, ref$OFFSET, fieldValue);
    }

    private static final GroupLayout checkout_options$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("checkout_options"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_checkout_options checkout_options
     * }
     */
    public static final GroupLayout checkout_options$layout() {
        return checkout_options$LAYOUT;
    }

    private static final long checkout_options$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_checkout_options checkout_options
     * }
     */
    public static final long checkout_options$offset() {
        return checkout_options$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_checkout_options checkout_options
     * }
     */
    public static MemorySegment checkout_options(MemorySegment struct) {
        return struct.asSlice(checkout_options$OFFSET, checkout_options$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_checkout_options checkout_options
     * }
     */
    public static void checkout_options(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, checkout_options$OFFSET, checkout_options$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

