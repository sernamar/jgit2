// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int version;
 *     uint32_t flags;
 *     size_t patch_no;
 *     size_t total_patches;
 *     const git_oid *id;
 *     const char *summary;
 *     const char *body;
 *     const git_signature *author;
 * }
 * }
 */
public class git_diff_format_email_options {

    git_diff_format_email_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("flags"),
        git2.C_LONG.withName("patch_no"),
        git2.C_LONG.withName("total_patches"),
        git2.C_POINTER.withName("id"),
        git2.C_POINTER.withName("summary"),
        git2.C_POINTER.withName("body"),
        git2.C_POINTER.withName("author")
    ).withName("$anon$338:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfLong patch_no$LAYOUT = (OfLong)$LAYOUT.select(groupElement("patch_no"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t patch_no
     * }
     */
    public static final OfLong patch_no$layout() {
        return patch_no$LAYOUT;
    }

    private static final long patch_no$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t patch_no
     * }
     */
    public static final long patch_no$offset() {
        return patch_no$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t patch_no
     * }
     */
    public static long patch_no(MemorySegment struct) {
        return struct.get(patch_no$LAYOUT, patch_no$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t patch_no
     * }
     */
    public static void patch_no(MemorySegment struct, long fieldValue) {
        struct.set(patch_no$LAYOUT, patch_no$OFFSET, fieldValue);
    }

    private static final OfLong total_patches$LAYOUT = (OfLong)$LAYOUT.select(groupElement("total_patches"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t total_patches
     * }
     */
    public static final OfLong total_patches$layout() {
        return total_patches$LAYOUT;
    }

    private static final long total_patches$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t total_patches
     * }
     */
    public static final long total_patches$offset() {
        return total_patches$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t total_patches
     * }
     */
    public static long total_patches(MemorySegment struct) {
        return struct.get(total_patches$LAYOUT, total_patches$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t total_patches
     * }
     */
    public static void total_patches(MemorySegment struct, long fieldValue) {
        struct.set(total_patches$LAYOUT, total_patches$OFFSET, fieldValue);
    }

    private static final AddressLayout id$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const git_oid *id
     * }
     */
    public static final AddressLayout id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const git_oid *id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const git_oid *id
     * }
     */
    public static MemorySegment id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const git_oid *id
     * }
     */
    public static void id(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final AddressLayout summary$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("summary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *summary
     * }
     */
    public static final AddressLayout summary$layout() {
        return summary$LAYOUT;
    }

    private static final long summary$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *summary
     * }
     */
    public static final long summary$offset() {
        return summary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *summary
     * }
     */
    public static MemorySegment summary(MemorySegment struct) {
        return struct.get(summary$LAYOUT, summary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *summary
     * }
     */
    public static void summary(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(summary$LAYOUT, summary$OFFSET, fieldValue);
    }

    private static final AddressLayout body$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("body"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *body
     * }
     */
    public static final AddressLayout body$layout() {
        return body$LAYOUT;
    }

    private static final long body$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *body
     * }
     */
    public static final long body$offset() {
        return body$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *body
     * }
     */
    public static MemorySegment body(MemorySegment struct) {
        return struct.get(body$LAYOUT, body$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *body
     * }
     */
    public static void body(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(body$LAYOUT, body$OFFSET, fieldValue);
    }

    private static final AddressLayout author$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("author"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const git_signature *author
     * }
     */
    public static final AddressLayout author$layout() {
        return author$LAYOUT;
    }

    private static final long author$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const git_signature *author
     * }
     */
    public static final long author$offset() {
        return author$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const git_signature *author
     * }
     */
    public static MemorySegment author(MemorySegment struct) {
        return struct.get(author$LAYOUT, author$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const git_signature *author
     * }
     */
    public static void author(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(author$LAYOUT, author$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

