// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct git_config_entry {
 *     const char *name;
 *     const char *value;
 *     const char *backend_type;
 *     const char *origin_path;
 *     unsigned int include_depth;
 *     git_config_level_t level;
 * }
 * }
 */
public class git_config_entry {

    git_config_entry() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_POINTER.withName("name"),
        git2.C_POINTER.withName("value"),
        git2.C_POINTER.withName("backend_type"),
        git2.C_POINTER.withName("origin_path"),
        git2.C_INT.withName("include_depth"),
        git2.C_INT.withName("level")
    ).withName("git_config_entry");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout value$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *value
     * }
     */
    public static final AddressLayout value$layout() {
        return value$LAYOUT;
    }

    private static final long value$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *value
     * }
     */
    public static final long value$offset() {
        return value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *value
     * }
     */
    public static MemorySegment value(MemorySegment struct) {
        return struct.get(value$LAYOUT, value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *value
     * }
     */
    public static void value(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(value$LAYOUT, value$OFFSET, fieldValue);
    }

    private static final AddressLayout backend_type$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("backend_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *backend_type
     * }
     */
    public static final AddressLayout backend_type$layout() {
        return backend_type$LAYOUT;
    }

    private static final long backend_type$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *backend_type
     * }
     */
    public static final long backend_type$offset() {
        return backend_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *backend_type
     * }
     */
    public static MemorySegment backend_type(MemorySegment struct) {
        return struct.get(backend_type$LAYOUT, backend_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *backend_type
     * }
     */
    public static void backend_type(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(backend_type$LAYOUT, backend_type$OFFSET, fieldValue);
    }

    private static final AddressLayout origin_path$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("origin_path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *origin_path
     * }
     */
    public static final AddressLayout origin_path$layout() {
        return origin_path$LAYOUT;
    }

    private static final long origin_path$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *origin_path
     * }
     */
    public static final long origin_path$offset() {
        return origin_path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *origin_path
     * }
     */
    public static MemorySegment origin_path(MemorySegment struct) {
        return struct.get(origin_path$LAYOUT, origin_path$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *origin_path
     * }
     */
    public static void origin_path(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(origin_path$LAYOUT, origin_path$OFFSET, fieldValue);
    }

    private static final OfInt include_depth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("include_depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int include_depth
     * }
     */
    public static final OfInt include_depth$layout() {
        return include_depth$LAYOUT;
    }

    private static final long include_depth$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int include_depth
     * }
     */
    public static final long include_depth$offset() {
        return include_depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int include_depth
     * }
     */
    public static int include_depth(MemorySegment struct) {
        return struct.get(include_depth$LAYOUT, include_depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int include_depth
     * }
     */
    public static void include_depth(MemorySegment struct, int fieldValue) {
        struct.set(include_depth$LAYOUT, include_depth$OFFSET, fieldValue);
    }

    private static final OfInt level$LAYOUT = (OfInt)$LAYOUT.select(groupElement("level"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_config_level_t level
     * }
     */
    public static final OfInt level$layout() {
        return level$LAYOUT;
    }

    private static final long level$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_config_level_t level
     * }
     */
    public static final long level$offset() {
        return level$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_config_level_t level
     * }
     */
    public static int level(MemorySegment struct) {
        return struct.get(level$LAYOUT, level$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_config_level_t level
     * }
     */
    public static void level(MemorySegment struct, int fieldValue) {
        struct.set(level$LAYOUT, level$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

