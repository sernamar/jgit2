// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct git_blame_options {
 *     unsigned int version;
 *     unsigned int flags;
 *     uint16_t min_match_characters;
 *     git_oid newest_commit;
 *     git_oid oldest_commit;
 *     size_t min_line;
 *     size_t max_line;
 * }
 * }
 */
public class git_blame_options {

    git_blame_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("flags"),
        git2.C_SHORT.withName("min_match_characters"),
        git_oid.layout().withName("newest_commit"),
        git_oid.layout().withName("oldest_commit"),
        MemoryLayout.paddingLayout(6),
        git2.C_LONG.withName("min_line"),
        git2.C_LONG.withName("max_line")
    ).withName("git_blame_options");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfShort min_match_characters$LAYOUT = (OfShort)$LAYOUT.select(groupElement("min_match_characters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t min_match_characters
     * }
     */
    public static final OfShort min_match_characters$layout() {
        return min_match_characters$LAYOUT;
    }

    private static final long min_match_characters$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t min_match_characters
     * }
     */
    public static final long min_match_characters$offset() {
        return min_match_characters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t min_match_characters
     * }
     */
    public static short min_match_characters(MemorySegment struct) {
        return struct.get(min_match_characters$LAYOUT, min_match_characters$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t min_match_characters
     * }
     */
    public static void min_match_characters(MemorySegment struct, short fieldValue) {
        struct.set(min_match_characters$LAYOUT, min_match_characters$OFFSET, fieldValue);
    }

    private static final GroupLayout newest_commit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("newest_commit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_oid newest_commit
     * }
     */
    public static final GroupLayout newest_commit$layout() {
        return newest_commit$LAYOUT;
    }

    private static final long newest_commit$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_oid newest_commit
     * }
     */
    public static final long newest_commit$offset() {
        return newest_commit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_oid newest_commit
     * }
     */
    public static MemorySegment newest_commit(MemorySegment struct) {
        return struct.asSlice(newest_commit$OFFSET, newest_commit$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_oid newest_commit
     * }
     */
    public static void newest_commit(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, newest_commit$OFFSET, newest_commit$LAYOUT.byteSize());
    }

    private static final GroupLayout oldest_commit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("oldest_commit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_oid oldest_commit
     * }
     */
    public static final GroupLayout oldest_commit$layout() {
        return oldest_commit$LAYOUT;
    }

    private static final long oldest_commit$OFFSET = 30;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_oid oldest_commit
     * }
     */
    public static final long oldest_commit$offset() {
        return oldest_commit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_oid oldest_commit
     * }
     */
    public static MemorySegment oldest_commit(MemorySegment struct) {
        return struct.asSlice(oldest_commit$OFFSET, oldest_commit$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_oid oldest_commit
     * }
     */
    public static void oldest_commit(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, oldest_commit$OFFSET, oldest_commit$LAYOUT.byteSize());
    }

    private static final OfLong min_line$LAYOUT = (OfLong)$LAYOUT.select(groupElement("min_line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t min_line
     * }
     */
    public static final OfLong min_line$layout() {
        return min_line$LAYOUT;
    }

    private static final long min_line$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t min_line
     * }
     */
    public static final long min_line$offset() {
        return min_line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t min_line
     * }
     */
    public static long min_line(MemorySegment struct) {
        return struct.get(min_line$LAYOUT, min_line$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t min_line
     * }
     */
    public static void min_line(MemorySegment struct, long fieldValue) {
        struct.set(min_line$LAYOUT, min_line$OFFSET, fieldValue);
    }

    private static final OfLong max_line$LAYOUT = (OfLong)$LAYOUT.select(groupElement("max_line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t max_line
     * }
     */
    public static final OfLong max_line$layout() {
        return max_line$LAYOUT;
    }

    private static final long max_line$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t max_line
     * }
     */
    public static final long max_line$offset() {
        return max_line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t max_line
     * }
     */
    public static long max_line(MemorySegment struct) {
        return struct.get(max_line$LAYOUT, max_line$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t max_line
     * }
     */
    public static void max_line(MemorySegment struct, long fieldValue) {
        struct.set(max_line$LAYOUT, max_line$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

