// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct git_clone_options {
 *     unsigned int version;
 *     git_checkout_options checkout_opts;
 *     git_fetch_options fetch_opts;
 *     int bare;
 *     git_clone_local_t local;
 *     const char *checkout_branch;
 *     git_repository_create_cb repository_cb;
 *     void *repository_cb_payload;
 *     git_remote_create_cb remote_cb;
 *     void *remote_cb_payload;
 * }
 * }
 */
public class git_clone_options {

    git_clone_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        MemoryLayout.paddingLayout(4),
        git_checkout_options.layout().withName("checkout_opts"),
        git_fetch_options.layout().withName("fetch_opts"),
        git2.C_INT.withName("bare"),
        git2.C_INT.withName("local"),
        git2.C_POINTER.withName("checkout_branch"),
        git2.C_POINTER.withName("repository_cb"),
        git2.C_POINTER.withName("repository_cb_payload"),
        git2.C_POINTER.withName("remote_cb"),
        git2.C_POINTER.withName("remote_cb_payload")
    ).withName("git_clone_options");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final GroupLayout checkout_opts$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("checkout_opts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_checkout_options checkout_opts
     * }
     */
    public static final GroupLayout checkout_opts$layout() {
        return checkout_opts$LAYOUT;
    }

    private static final long checkout_opts$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_checkout_options checkout_opts
     * }
     */
    public static final long checkout_opts$offset() {
        return checkout_opts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_checkout_options checkout_opts
     * }
     */
    public static MemorySegment checkout_opts(MemorySegment struct) {
        return struct.asSlice(checkout_opts$OFFSET, checkout_opts$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_checkout_options checkout_opts
     * }
     */
    public static void checkout_opts(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, checkout_opts$OFFSET, checkout_opts$LAYOUT.byteSize());
    }

    private static final GroupLayout fetch_opts$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("fetch_opts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_fetch_options fetch_opts
     * }
     */
    public static final GroupLayout fetch_opts$layout() {
        return fetch_opts$LAYOUT;
    }

    private static final long fetch_opts$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_fetch_options fetch_opts
     * }
     */
    public static final long fetch_opts$offset() {
        return fetch_opts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_fetch_options fetch_opts
     * }
     */
    public static MemorySegment fetch_opts(MemorySegment struct) {
        return struct.asSlice(fetch_opts$OFFSET, fetch_opts$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_fetch_options fetch_opts
     * }
     */
    public static void fetch_opts(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fetch_opts$OFFSET, fetch_opts$LAYOUT.byteSize());
    }

    private static final OfInt bare$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bare"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bare
     * }
     */
    public static final OfInt bare$layout() {
        return bare$LAYOUT;
    }

    private static final long bare$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bare
     * }
     */
    public static final long bare$offset() {
        return bare$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bare
     * }
     */
    public static int bare(MemorySegment struct) {
        return struct.get(bare$LAYOUT, bare$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bare
     * }
     */
    public static void bare(MemorySegment struct, int fieldValue) {
        struct.set(bare$LAYOUT, bare$OFFSET, fieldValue);
    }

    private static final OfInt local$LAYOUT = (OfInt)$LAYOUT.select(groupElement("local"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_clone_local_t local
     * }
     */
    public static final OfInt local$layout() {
        return local$LAYOUT;
    }

    private static final long local$OFFSET = 372;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_clone_local_t local
     * }
     */
    public static final long local$offset() {
        return local$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_clone_local_t local
     * }
     */
    public static int local(MemorySegment struct) {
        return struct.get(local$LAYOUT, local$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_clone_local_t local
     * }
     */
    public static void local(MemorySegment struct, int fieldValue) {
        struct.set(local$LAYOUT, local$OFFSET, fieldValue);
    }

    private static final AddressLayout checkout_branch$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("checkout_branch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *checkout_branch
     * }
     */
    public static final AddressLayout checkout_branch$layout() {
        return checkout_branch$LAYOUT;
    }

    private static final long checkout_branch$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *checkout_branch
     * }
     */
    public static final long checkout_branch$offset() {
        return checkout_branch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *checkout_branch
     * }
     */
    public static MemorySegment checkout_branch(MemorySegment struct) {
        return struct.get(checkout_branch$LAYOUT, checkout_branch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *checkout_branch
     * }
     */
    public static void checkout_branch(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(checkout_branch$LAYOUT, checkout_branch$OFFSET, fieldValue);
    }

    private static final AddressLayout repository_cb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("repository_cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_repository_create_cb repository_cb
     * }
     */
    public static final AddressLayout repository_cb$layout() {
        return repository_cb$LAYOUT;
    }

    private static final long repository_cb$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_repository_create_cb repository_cb
     * }
     */
    public static final long repository_cb$offset() {
        return repository_cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_repository_create_cb repository_cb
     * }
     */
    public static MemorySegment repository_cb(MemorySegment struct) {
        return struct.get(repository_cb$LAYOUT, repository_cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_repository_create_cb repository_cb
     * }
     */
    public static void repository_cb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(repository_cb$LAYOUT, repository_cb$OFFSET, fieldValue);
    }

    private static final AddressLayout repository_cb_payload$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("repository_cb_payload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *repository_cb_payload
     * }
     */
    public static final AddressLayout repository_cb_payload$layout() {
        return repository_cb_payload$LAYOUT;
    }

    private static final long repository_cb_payload$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *repository_cb_payload
     * }
     */
    public static final long repository_cb_payload$offset() {
        return repository_cb_payload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *repository_cb_payload
     * }
     */
    public static MemorySegment repository_cb_payload(MemorySegment struct) {
        return struct.get(repository_cb_payload$LAYOUT, repository_cb_payload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *repository_cb_payload
     * }
     */
    public static void repository_cb_payload(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(repository_cb_payload$LAYOUT, repository_cb_payload$OFFSET, fieldValue);
    }

    private static final AddressLayout remote_cb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("remote_cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_remote_create_cb remote_cb
     * }
     */
    public static final AddressLayout remote_cb$layout() {
        return remote_cb$LAYOUT;
    }

    private static final long remote_cb$OFFSET = 400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_remote_create_cb remote_cb
     * }
     */
    public static final long remote_cb$offset() {
        return remote_cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_remote_create_cb remote_cb
     * }
     */
    public static MemorySegment remote_cb(MemorySegment struct) {
        return struct.get(remote_cb$LAYOUT, remote_cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_remote_create_cb remote_cb
     * }
     */
    public static void remote_cb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(remote_cb$LAYOUT, remote_cb$OFFSET, fieldValue);
    }

    private static final AddressLayout remote_cb_payload$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("remote_cb_payload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *remote_cb_payload
     * }
     */
    public static final AddressLayout remote_cb_payload$layout() {
        return remote_cb_payload$LAYOUT;
    }

    private static final long remote_cb_payload$OFFSET = 408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *remote_cb_payload
     * }
     */
    public static final long remote_cb_payload$offset() {
        return remote_cb_payload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *remote_cb_payload
     * }
     */
    public static MemorySegment remote_cb_payload(MemorySegment struct) {
        return struct.get(remote_cb_payload$LAYOUT, remote_cb_payload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *remote_cb_payload
     * }
     */
    public static void remote_cb_payload(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(remote_cb_payload$LAYOUT, remote_cb_payload$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

