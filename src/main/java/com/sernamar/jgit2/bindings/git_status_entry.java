// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     git_status_t status;
 *     git_diff_delta *head_to_index;
 *     git_diff_delta *index_to_workdir;
 * }
 * }
 */
public class git_status_entry {

    git_status_entry() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("status"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("head_to_index"),
        git2.C_POINTER.withName("index_to_workdir")
    ).withName("$anon$298:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt status$LAYOUT = (OfInt)$LAYOUT.select(groupElement("status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_status_t status
     * }
     */
    public static final OfInt status$layout() {
        return status$LAYOUT;
    }

    private static final long status$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_status_t status
     * }
     */
    public static final long status$offset() {
        return status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_status_t status
     * }
     */
    public static int status(MemorySegment struct) {
        return struct.get(status$LAYOUT, status$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_status_t status
     * }
     */
    public static void status(MemorySegment struct, int fieldValue) {
        struct.set(status$LAYOUT, status$OFFSET, fieldValue);
    }

    private static final AddressLayout head_to_index$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("head_to_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_diff_delta *head_to_index
     * }
     */
    public static final AddressLayout head_to_index$layout() {
        return head_to_index$LAYOUT;
    }

    private static final long head_to_index$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_diff_delta *head_to_index
     * }
     */
    public static final long head_to_index$offset() {
        return head_to_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_diff_delta *head_to_index
     * }
     */
    public static MemorySegment head_to_index(MemorySegment struct) {
        return struct.get(head_to_index$LAYOUT, head_to_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_diff_delta *head_to_index
     * }
     */
    public static void head_to_index(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(head_to_index$LAYOUT, head_to_index$OFFSET, fieldValue);
    }

    private static final AddressLayout index_to_workdir$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("index_to_workdir"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_diff_delta *index_to_workdir
     * }
     */
    public static final AddressLayout index_to_workdir$layout() {
        return index_to_workdir$LAYOUT;
    }

    private static final long index_to_workdir$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_diff_delta *index_to_workdir
     * }
     */
    public static final long index_to_workdir$offset() {
        return index_to_workdir$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_diff_delta *index_to_workdir
     * }
     */
    public static MemorySegment index_to_workdir(MemorySegment struct) {
        return struct.get(index_to_workdir$LAYOUT, index_to_workdir$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_diff_delta *index_to_workdir
     * }
     */
    public static void index_to_workdir(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(index_to_workdir$LAYOUT, index_to_workdir$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

