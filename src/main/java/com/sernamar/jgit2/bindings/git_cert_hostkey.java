// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     git_cert parent;
 *     git_cert_ssh_t type;
 *     unsigned char hash_md5[16];
 *     unsigned char hash_sha1[20];
 *     unsigned char hash_sha256[32];
 *     git_cert_ssh_raw_type_t raw_type;
 *     const char *hostkey;
 *     size_t hostkey_len;
 * }
 * }
 */
public class git_cert_hostkey {

    git_cert_hostkey() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git_cert.layout().withName("parent"),
        git2.C_INT.withName("type"),
        MemoryLayout.sequenceLayout(16, git2.C_CHAR).withName("hash_md5"),
        MemoryLayout.sequenceLayout(20, git2.C_CHAR).withName("hash_sha1"),
        MemoryLayout.sequenceLayout(32, git2.C_CHAR).withName("hash_sha256"),
        git2.C_INT.withName("raw_type"),
        git2.C_POINTER.withName("hostkey"),
        git2.C_LONG.withName("hostkey_len")
    ).withName("$anon$108:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_cert parent
     * }
     */
    public static final GroupLayout parent$layout() {
        return parent$LAYOUT;
    }

    private static final long parent$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_cert parent
     * }
     */
    public static final long parent$offset() {
        return parent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_cert parent
     * }
     */
    public static MemorySegment parent(MemorySegment struct) {
        return struct.asSlice(parent$OFFSET, parent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_cert parent
     * }
     */
    public static void parent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent$OFFSET, parent$LAYOUT.byteSize());
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_cert_ssh_t type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_cert_ssh_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_cert_ssh_t type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_cert_ssh_t type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final SequenceLayout hash_md5$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("hash_md5"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char hash_md5[16]
     * }
     */
    public static final SequenceLayout hash_md5$layout() {
        return hash_md5$LAYOUT;
    }

    private static final long hash_md5$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char hash_md5[16]
     * }
     */
    public static final long hash_md5$offset() {
        return hash_md5$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char hash_md5[16]
     * }
     */
    public static MemorySegment hash_md5(MemorySegment struct) {
        return struct.asSlice(hash_md5$OFFSET, hash_md5$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char hash_md5[16]
     * }
     */
    public static void hash_md5(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, hash_md5$OFFSET, hash_md5$LAYOUT.byteSize());
    }

    private static long[] hash_md5$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char hash_md5[16]
     * }
     */
    public static long[] hash_md5$dimensions() {
        return hash_md5$DIMS;
    }
    private static final VarHandle hash_md5$ELEM_HANDLE = hash_md5$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char hash_md5[16]
     * }
     */
    public static byte hash_md5(MemorySegment struct, long index0) {
        return (byte)hash_md5$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char hash_md5[16]
     * }
     */
    public static void hash_md5(MemorySegment struct, long index0, byte fieldValue) {
        hash_md5$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout hash_sha1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("hash_sha1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char hash_sha1[20]
     * }
     */
    public static final SequenceLayout hash_sha1$layout() {
        return hash_sha1$LAYOUT;
    }

    private static final long hash_sha1$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char hash_sha1[20]
     * }
     */
    public static final long hash_sha1$offset() {
        return hash_sha1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char hash_sha1[20]
     * }
     */
    public static MemorySegment hash_sha1(MemorySegment struct) {
        return struct.asSlice(hash_sha1$OFFSET, hash_sha1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char hash_sha1[20]
     * }
     */
    public static void hash_sha1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, hash_sha1$OFFSET, hash_sha1$LAYOUT.byteSize());
    }

    private static long[] hash_sha1$DIMS = { 20 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char hash_sha1[20]
     * }
     */
    public static long[] hash_sha1$dimensions() {
        return hash_sha1$DIMS;
    }
    private static final VarHandle hash_sha1$ELEM_HANDLE = hash_sha1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char hash_sha1[20]
     * }
     */
    public static byte hash_sha1(MemorySegment struct, long index0) {
        return (byte)hash_sha1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char hash_sha1[20]
     * }
     */
    public static void hash_sha1(MemorySegment struct, long index0, byte fieldValue) {
        hash_sha1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout hash_sha256$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("hash_sha256"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char hash_sha256[32]
     * }
     */
    public static final SequenceLayout hash_sha256$layout() {
        return hash_sha256$LAYOUT;
    }

    private static final long hash_sha256$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char hash_sha256[32]
     * }
     */
    public static final long hash_sha256$offset() {
        return hash_sha256$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char hash_sha256[32]
     * }
     */
    public static MemorySegment hash_sha256(MemorySegment struct) {
        return struct.asSlice(hash_sha256$OFFSET, hash_sha256$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char hash_sha256[32]
     * }
     */
    public static void hash_sha256(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, hash_sha256$OFFSET, hash_sha256$LAYOUT.byteSize());
    }

    private static long[] hash_sha256$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char hash_sha256[32]
     * }
     */
    public static long[] hash_sha256$dimensions() {
        return hash_sha256$DIMS;
    }
    private static final VarHandle hash_sha256$ELEM_HANDLE = hash_sha256$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char hash_sha256[32]
     * }
     */
    public static byte hash_sha256(MemorySegment struct, long index0) {
        return (byte)hash_sha256$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char hash_sha256[32]
     * }
     */
    public static void hash_sha256(MemorySegment struct, long index0, byte fieldValue) {
        hash_sha256$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt raw_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("raw_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_cert_ssh_raw_type_t raw_type
     * }
     */
    public static final OfInt raw_type$layout() {
        return raw_type$LAYOUT;
    }

    private static final long raw_type$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_cert_ssh_raw_type_t raw_type
     * }
     */
    public static final long raw_type$offset() {
        return raw_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_cert_ssh_raw_type_t raw_type
     * }
     */
    public static int raw_type(MemorySegment struct) {
        return struct.get(raw_type$LAYOUT, raw_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_cert_ssh_raw_type_t raw_type
     * }
     */
    public static void raw_type(MemorySegment struct, int fieldValue) {
        struct.set(raw_type$LAYOUT, raw_type$OFFSET, fieldValue);
    }

    private static final AddressLayout hostkey$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hostkey"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *hostkey
     * }
     */
    public static final AddressLayout hostkey$layout() {
        return hostkey$LAYOUT;
    }

    private static final long hostkey$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *hostkey
     * }
     */
    public static final long hostkey$offset() {
        return hostkey$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *hostkey
     * }
     */
    public static MemorySegment hostkey(MemorySegment struct) {
        return struct.get(hostkey$LAYOUT, hostkey$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *hostkey
     * }
     */
    public static void hostkey(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hostkey$LAYOUT, hostkey$OFFSET, fieldValue);
    }

    private static final OfLong hostkey_len$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hostkey_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t hostkey_len
     * }
     */
    public static final OfLong hostkey_len$layout() {
        return hostkey_len$LAYOUT;
    }

    private static final long hostkey_len$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t hostkey_len
     * }
     */
    public static final long hostkey_len$offset() {
        return hostkey_len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t hostkey_len
     * }
     */
    public static long hostkey_len(MemorySegment struct) {
        return struct.get(hostkey_len$LAYOUT, hostkey_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t hostkey_len
     * }
     */
    public static void hostkey_len(MemorySegment struct, long fieldValue) {
        struct.set(hostkey_len$LAYOUT, hostkey_len$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

