// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     git_delta_t status;
 *     uint32_t flags;
 *     uint16_t similarity;
 *     uint16_t nfiles;
 *     git_diff_file old_file;
 *     git_diff_file new_file;
 * }
 * }
 */
public class git_diff_delta {

    git_diff_delta() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("status"),
        git2.C_INT.withName("flags"),
        git2.C_SHORT.withName("similarity"),
        git2.C_SHORT.withName("nfiles"),
        MemoryLayout.paddingLayout(4),
        git_diff_file.layout().withName("old_file"),
        git_diff_file.layout().withName("new_file")
    ).withName("$anon$324:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt status$LAYOUT = (OfInt)$LAYOUT.select(groupElement("status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_delta_t status
     * }
     */
    public static final OfInt status$layout() {
        return status$LAYOUT;
    }

    private static final long status$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_delta_t status
     * }
     */
    public static final long status$offset() {
        return status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_delta_t status
     * }
     */
    public static int status(MemorySegment struct) {
        return struct.get(status$LAYOUT, status$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_delta_t status
     * }
     */
    public static void status(MemorySegment struct, int fieldValue) {
        struct.set(status$LAYOUT, status$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfShort similarity$LAYOUT = (OfShort)$LAYOUT.select(groupElement("similarity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t similarity
     * }
     */
    public static final OfShort similarity$layout() {
        return similarity$LAYOUT;
    }

    private static final long similarity$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t similarity
     * }
     */
    public static final long similarity$offset() {
        return similarity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t similarity
     * }
     */
    public static short similarity(MemorySegment struct) {
        return struct.get(similarity$LAYOUT, similarity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t similarity
     * }
     */
    public static void similarity(MemorySegment struct, short fieldValue) {
        struct.set(similarity$LAYOUT, similarity$OFFSET, fieldValue);
    }

    private static final OfShort nfiles$LAYOUT = (OfShort)$LAYOUT.select(groupElement("nfiles"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t nfiles
     * }
     */
    public static final OfShort nfiles$layout() {
        return nfiles$LAYOUT;
    }

    private static final long nfiles$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t nfiles
     * }
     */
    public static final long nfiles$offset() {
        return nfiles$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t nfiles
     * }
     */
    public static short nfiles(MemorySegment struct) {
        return struct.get(nfiles$LAYOUT, nfiles$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t nfiles
     * }
     */
    public static void nfiles(MemorySegment struct, short fieldValue) {
        struct.set(nfiles$LAYOUT, nfiles$OFFSET, fieldValue);
    }

    private static final GroupLayout old_file$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("old_file"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_diff_file old_file
     * }
     */
    public static final GroupLayout old_file$layout() {
        return old_file$LAYOUT;
    }

    private static final long old_file$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_diff_file old_file
     * }
     */
    public static final long old_file$offset() {
        return old_file$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_diff_file old_file
     * }
     */
    public static MemorySegment old_file(MemorySegment struct) {
        return struct.asSlice(old_file$OFFSET, old_file$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_diff_file old_file
     * }
     */
    public static void old_file(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, old_file$OFFSET, old_file$LAYOUT.byteSize());
    }

    private static final GroupLayout new_file$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("new_file"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_diff_file new_file
     * }
     */
    public static final GroupLayout new_file$layout() {
        return new_file$LAYOUT;
    }

    private static final long new_file$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_diff_file new_file
     * }
     */
    public static final long new_file$offset() {
        return new_file$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_diff_file new_file
     * }
     */
    public static MemorySegment new_file(MemorySegment struct) {
        return struct.asSlice(new_file$OFFSET, new_file$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_diff_file new_file
     * }
     */
    public static void new_file(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, new_file$OFFSET, new_file$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

