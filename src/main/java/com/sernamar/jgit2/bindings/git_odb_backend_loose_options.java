// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int version;
 *     uint32_t flags;
 *     int compression_level;
 *     unsigned int dir_mode;
 *     unsigned int file_mode;
 *     git_oid_t oid_type;
 * }
 * }
 */
public class git_odb_backend_loose_options {

    git_odb_backend_loose_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("flags"),
        git2.C_INT.withName("compression_level"),
        git2.C_INT.withName("dir_mode"),
        git2.C_INT.withName("file_mode"),
        git2.C_INT.withName("oid_type")
    ).withName("$anon$49:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt compression_level$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compression_level"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int compression_level
     * }
     */
    public static final OfInt compression_level$layout() {
        return compression_level$LAYOUT;
    }

    private static final long compression_level$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int compression_level
     * }
     */
    public static final long compression_level$offset() {
        return compression_level$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int compression_level
     * }
     */
    public static int compression_level(MemorySegment struct) {
        return struct.get(compression_level$LAYOUT, compression_level$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int compression_level
     * }
     */
    public static void compression_level(MemorySegment struct, int fieldValue) {
        struct.set(compression_level$LAYOUT, compression_level$OFFSET, fieldValue);
    }

    private static final OfInt dir_mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dir_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int dir_mode
     * }
     */
    public static final OfInt dir_mode$layout() {
        return dir_mode$LAYOUT;
    }

    private static final long dir_mode$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int dir_mode
     * }
     */
    public static final long dir_mode$offset() {
        return dir_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int dir_mode
     * }
     */
    public static int dir_mode(MemorySegment struct) {
        return struct.get(dir_mode$LAYOUT, dir_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int dir_mode
     * }
     */
    public static void dir_mode(MemorySegment struct, int fieldValue) {
        struct.set(dir_mode$LAYOUT, dir_mode$OFFSET, fieldValue);
    }

    private static final OfInt file_mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("file_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int file_mode
     * }
     */
    public static final OfInt file_mode$layout() {
        return file_mode$LAYOUT;
    }

    private static final long file_mode$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int file_mode
     * }
     */
    public static final long file_mode$offset() {
        return file_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int file_mode
     * }
     */
    public static int file_mode(MemorySegment struct) {
        return struct.get(file_mode$LAYOUT, file_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int file_mode
     * }
     */
    public static void file_mode(MemorySegment struct, int fieldValue) {
        struct.set(file_mode$LAYOUT, file_mode$OFFSET, fieldValue);
    }

    private static final OfInt oid_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("oid_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_oid_t oid_type
     * }
     */
    public static final OfInt oid_type$layout() {
        return oid_type$LAYOUT;
    }

    private static final long oid_type$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_oid_t oid_type
     * }
     */
    public static final long oid_type$offset() {
        return oid_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_oid_t oid_type
     * }
     */
    public static int oid_type(MemorySegment struct) {
        return struct.get(oid_type$LAYOUT, oid_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_oid_t oid_type
     * }
     */
    public static void oid_type(MemorySegment struct, int fieldValue) {
        struct.set(oid_type$LAYOUT, oid_type$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

