// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int version;
 *     uint32_t flags;
 *     git_diff_options diff_opts;
 *     git_diff_find_options diff_find_opts;
 *     const char *subject_prefix;
 *     size_t start_number;
 *     size_t reroll_number;
 * }
 * }
 */
public class git_email_create_options {

    git_email_create_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("flags"),
        git_diff_options.layout().withName("diff_opts"),
        git_diff_find_options.layout().withName("diff_find_opts"),
        git2.C_POINTER.withName("subject_prefix"),
        git2.C_LONG.withName("start_number"),
        git2.C_LONG.withName("reroll_number")
    ).withName("$anon$44:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final GroupLayout diff_opts$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("diff_opts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_diff_options diff_opts
     * }
     */
    public static final GroupLayout diff_opts$layout() {
        return diff_opts$LAYOUT;
    }

    private static final long diff_opts$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_diff_options diff_opts
     * }
     */
    public static final long diff_opts$offset() {
        return diff_opts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_diff_options diff_opts
     * }
     */
    public static MemorySegment diff_opts(MemorySegment struct) {
        return struct.asSlice(diff_opts$OFFSET, diff_opts$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_diff_options diff_opts
     * }
     */
    public static void diff_opts(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, diff_opts$OFFSET, diff_opts$LAYOUT.byteSize());
    }

    private static final GroupLayout diff_find_opts$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("diff_find_opts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_diff_find_options diff_find_opts
     * }
     */
    public static final GroupLayout diff_find_opts$layout() {
        return diff_find_opts$LAYOUT;
    }

    private static final long diff_find_opts$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_diff_find_options diff_find_opts
     * }
     */
    public static final long diff_find_opts$offset() {
        return diff_find_opts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_diff_find_options diff_find_opts
     * }
     */
    public static MemorySegment diff_find_opts(MemorySegment struct) {
        return struct.asSlice(diff_find_opts$OFFSET, diff_find_opts$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_diff_find_options diff_find_opts
     * }
     */
    public static void diff_find_opts(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, diff_find_opts$OFFSET, diff_find_opts$LAYOUT.byteSize());
    }

    private static final AddressLayout subject_prefix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("subject_prefix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *subject_prefix
     * }
     */
    public static final AddressLayout subject_prefix$layout() {
        return subject_prefix$LAYOUT;
    }

    private static final long subject_prefix$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *subject_prefix
     * }
     */
    public static final long subject_prefix$offset() {
        return subject_prefix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *subject_prefix
     * }
     */
    public static MemorySegment subject_prefix(MemorySegment struct) {
        return struct.get(subject_prefix$LAYOUT, subject_prefix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *subject_prefix
     * }
     */
    public static void subject_prefix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(subject_prefix$LAYOUT, subject_prefix$OFFSET, fieldValue);
    }

    private static final OfLong start_number$LAYOUT = (OfLong)$LAYOUT.select(groupElement("start_number"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t start_number
     * }
     */
    public static final OfLong start_number$layout() {
        return start_number$LAYOUT;
    }

    private static final long start_number$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t start_number
     * }
     */
    public static final long start_number$offset() {
        return start_number$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t start_number
     * }
     */
    public static long start_number(MemorySegment struct) {
        return struct.get(start_number$LAYOUT, start_number$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t start_number
     * }
     */
    public static void start_number(MemorySegment struct, long fieldValue) {
        struct.set(start_number$LAYOUT, start_number$OFFSET, fieldValue);
    }

    private static final OfLong reroll_number$LAYOUT = (OfLong)$LAYOUT.select(groupElement("reroll_number"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t reroll_number
     * }
     */
    public static final OfLong reroll_number$layout() {
        return reroll_number$LAYOUT;
    }

    private static final long reroll_number$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t reroll_number
     * }
     */
    public static final long reroll_number$offset() {
        return reroll_number$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t reroll_number
     * }
     */
    public static long reroll_number(MemorySegment struct) {
        return struct.get(reroll_number$LAYOUT, reroll_number$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t reroll_number
     * }
     */
    public static void reroll_number(MemorySegment struct, long fieldValue) {
        struct.set(reroll_number$LAYOUT, reroll_number$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

