// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     char *src_refname;
 *     char *dst_refname;
 *     git_oid src;
 *     git_oid dst;
 * }
 * }
 */
public class git_push_update {

    git_push_update() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_POINTER.withName("src_refname"),
        git2.C_POINTER.withName("dst_refname"),
        git_oid.layout().withName("src"),
        git_oid.layout().withName("dst")
    ).withName("$anon$490:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout src_refname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("src_refname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *src_refname
     * }
     */
    public static final AddressLayout src_refname$layout() {
        return src_refname$LAYOUT;
    }

    private static final long src_refname$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *src_refname
     * }
     */
    public static final long src_refname$offset() {
        return src_refname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *src_refname
     * }
     */
    public static MemorySegment src_refname(MemorySegment struct) {
        return struct.get(src_refname$LAYOUT, src_refname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *src_refname
     * }
     */
    public static void src_refname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(src_refname$LAYOUT, src_refname$OFFSET, fieldValue);
    }

    private static final AddressLayout dst_refname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dst_refname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *dst_refname
     * }
     */
    public static final AddressLayout dst_refname$layout() {
        return dst_refname$LAYOUT;
    }

    private static final long dst_refname$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *dst_refname
     * }
     */
    public static final long dst_refname$offset() {
        return dst_refname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *dst_refname
     * }
     */
    public static MemorySegment dst_refname(MemorySegment struct) {
        return struct.get(dst_refname$LAYOUT, dst_refname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *dst_refname
     * }
     */
    public static void dst_refname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dst_refname$LAYOUT, dst_refname$OFFSET, fieldValue);
    }

    private static final GroupLayout src$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("src"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_oid src
     * }
     */
    public static final GroupLayout src$layout() {
        return src$LAYOUT;
    }

    private static final long src$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_oid src
     * }
     */
    public static final long src$offset() {
        return src$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_oid src
     * }
     */
    public static MemorySegment src(MemorySegment struct) {
        return struct.asSlice(src$OFFSET, src$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_oid src
     * }
     */
    public static void src(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, src$OFFSET, src$LAYOUT.byteSize());
    }

    private static final GroupLayout dst$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("dst"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_oid dst
     * }
     */
    public static final GroupLayout dst$layout() {
        return dst$LAYOUT;
    }

    private static final long dst$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_oid dst
     * }
     */
    public static final long dst$offset() {
        return dst$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_oid dst
     * }
     */
    public static MemorySegment dst(MemorySegment struct) {
        return struct.asSlice(dst$OFFSET, dst$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_oid dst
     * }
     */
    public static void dst(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dst$OFFSET, dst$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

