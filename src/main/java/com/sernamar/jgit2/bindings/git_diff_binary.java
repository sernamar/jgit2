// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int contains_data;
 *     git_diff_binary_file old_file;
 *     git_diff_binary_file new_file;
 * }
 * }
 */
public class git_diff_binary {

    git_diff_binary() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("contains_data"),
        MemoryLayout.paddingLayout(4),
        git_diff_binary_file.layout().withName("old_file"),
        git_diff_binary_file.layout().withName("new_file")
    ).withName("$anon$553:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt contains_data$LAYOUT = (OfInt)$LAYOUT.select(groupElement("contains_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int contains_data
     * }
     */
    public static final OfInt contains_data$layout() {
        return contains_data$LAYOUT;
    }

    private static final long contains_data$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int contains_data
     * }
     */
    public static final long contains_data$offset() {
        return contains_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int contains_data
     * }
     */
    public static int contains_data(MemorySegment struct) {
        return struct.get(contains_data$LAYOUT, contains_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int contains_data
     * }
     */
    public static void contains_data(MemorySegment struct, int fieldValue) {
        struct.set(contains_data$LAYOUT, contains_data$OFFSET, fieldValue);
    }

    private static final GroupLayout old_file$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("old_file"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_diff_binary_file old_file
     * }
     */
    public static final GroupLayout old_file$layout() {
        return old_file$LAYOUT;
    }

    private static final long old_file$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_diff_binary_file old_file
     * }
     */
    public static final long old_file$offset() {
        return old_file$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_diff_binary_file old_file
     * }
     */
    public static MemorySegment old_file(MemorySegment struct) {
        return struct.asSlice(old_file$OFFSET, old_file$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_diff_binary_file old_file
     * }
     */
    public static void old_file(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, old_file$OFFSET, old_file$LAYOUT.byteSize());
    }

    private static final GroupLayout new_file$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("new_file"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_diff_binary_file new_file
     * }
     */
    public static final GroupLayout new_file$layout() {
        return new_file$LAYOUT;
    }

    private static final long new_file$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_diff_binary_file new_file
     * }
     */
    public static final long new_file$offset() {
        return new_file$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_diff_binary_file new_file
     * }
     */
    public static MemorySegment new_file(MemorySegment struct) {
        return struct.asSlice(new_file$OFFSET, new_file$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_diff_binary_file new_file
     * }
     */
    public static void new_file(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, new_file$OFFSET, new_file$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

