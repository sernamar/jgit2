// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     int old_start;
 *     int old_lines;
 *     int new_start;
 *     int new_lines;
 *     size_t header_len;
 *     char header[128];
 * }
 * }
 */
public class git_diff_hunk {

    git_diff_hunk() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("old_start"),
        git2.C_INT.withName("old_lines"),
        git2.C_INT.withName("new_start"),
        git2.C_INT.withName("new_lines"),
        git2.C_LONG.withName("header_len"),
        MemoryLayout.sequenceLayout(128, git2.C_CHAR).withName("header")
    ).withName("$anon$590:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt old_start$LAYOUT = (OfInt)$LAYOUT.select(groupElement("old_start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int old_start
     * }
     */
    public static final OfInt old_start$layout() {
        return old_start$LAYOUT;
    }

    private static final long old_start$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int old_start
     * }
     */
    public static final long old_start$offset() {
        return old_start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int old_start
     * }
     */
    public static int old_start(MemorySegment struct) {
        return struct.get(old_start$LAYOUT, old_start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int old_start
     * }
     */
    public static void old_start(MemorySegment struct, int fieldValue) {
        struct.set(old_start$LAYOUT, old_start$OFFSET, fieldValue);
    }

    private static final OfInt old_lines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("old_lines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int old_lines
     * }
     */
    public static final OfInt old_lines$layout() {
        return old_lines$LAYOUT;
    }

    private static final long old_lines$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int old_lines
     * }
     */
    public static final long old_lines$offset() {
        return old_lines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int old_lines
     * }
     */
    public static int old_lines(MemorySegment struct) {
        return struct.get(old_lines$LAYOUT, old_lines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int old_lines
     * }
     */
    public static void old_lines(MemorySegment struct, int fieldValue) {
        struct.set(old_lines$LAYOUT, old_lines$OFFSET, fieldValue);
    }

    private static final OfInt new_start$LAYOUT = (OfInt)$LAYOUT.select(groupElement("new_start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int new_start
     * }
     */
    public static final OfInt new_start$layout() {
        return new_start$LAYOUT;
    }

    private static final long new_start$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int new_start
     * }
     */
    public static final long new_start$offset() {
        return new_start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int new_start
     * }
     */
    public static int new_start(MemorySegment struct) {
        return struct.get(new_start$LAYOUT, new_start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int new_start
     * }
     */
    public static void new_start(MemorySegment struct, int fieldValue) {
        struct.set(new_start$LAYOUT, new_start$OFFSET, fieldValue);
    }

    private static final OfInt new_lines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("new_lines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int new_lines
     * }
     */
    public static final OfInt new_lines$layout() {
        return new_lines$LAYOUT;
    }

    private static final long new_lines$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int new_lines
     * }
     */
    public static final long new_lines$offset() {
        return new_lines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int new_lines
     * }
     */
    public static int new_lines(MemorySegment struct) {
        return struct.get(new_lines$LAYOUT, new_lines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int new_lines
     * }
     */
    public static void new_lines(MemorySegment struct, int fieldValue) {
        struct.set(new_lines$LAYOUT, new_lines$OFFSET, fieldValue);
    }

    private static final OfLong header_len$LAYOUT = (OfLong)$LAYOUT.select(groupElement("header_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t header_len
     * }
     */
    public static final OfLong header_len$layout() {
        return header_len$LAYOUT;
    }

    private static final long header_len$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t header_len
     * }
     */
    public static final long header_len$offset() {
        return header_len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t header_len
     * }
     */
    public static long header_len(MemorySegment struct) {
        return struct.get(header_len$LAYOUT, header_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t header_len
     * }
     */
    public static void header_len(MemorySegment struct, long fieldValue) {
        struct.set(header_len$LAYOUT, header_len$OFFSET, fieldValue);
    }

    private static final SequenceLayout header$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("header"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char header[128]
     * }
     */
    public static final SequenceLayout header$layout() {
        return header$LAYOUT;
    }

    private static final long header$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char header[128]
     * }
     */
    public static final long header$offset() {
        return header$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char header[128]
     * }
     */
    public static MemorySegment header(MemorySegment struct) {
        return struct.asSlice(header$OFFSET, header$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char header[128]
     * }
     */
    public static void header(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, header$OFFSET, header$LAYOUT.byteSize());
    }

    private static long[] header$DIMS = { 128 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char header[128]
     * }
     */
    public static long[] header$dimensions() {
        return header$DIMS;
    }
    private static final VarHandle header$ELEM_HANDLE = header$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char header[128]
     * }
     */
    public static byte header(MemorySegment struct, long index0) {
        return (byte)header$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char header[128]
     * }
     */
    public static void header(MemorySegment struct, long index0, byte fieldValue) {
        header$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

