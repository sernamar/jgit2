// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     git_tree_update_t action;
 *     git_oid id;
 *     git_filemode_t filemode;
 *     const char *path;
 * }
 * }
 */
public class git_tree_update {

    git_tree_update() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("action"),
        git_oid.layout().withName("id"),
        git2.C_INT.withName("filemode"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("path")
    ).withName("$anon$449:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt action$LAYOUT = (OfInt)$LAYOUT.select(groupElement("action"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_tree_update_t action
     * }
     */
    public static final OfInt action$layout() {
        return action$LAYOUT;
    }

    private static final long action$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_tree_update_t action
     * }
     */
    public static final long action$offset() {
        return action$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_tree_update_t action
     * }
     */
    public static int action(MemorySegment struct) {
        return struct.get(action$LAYOUT, action$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_tree_update_t action
     * }
     */
    public static void action(MemorySegment struct, int fieldValue) {
        struct.set(action$LAYOUT, action$OFFSET, fieldValue);
    }

    private static final GroupLayout id$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_oid id
     * }
     */
    public static final GroupLayout id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_oid id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_oid id
     * }
     */
    public static MemorySegment id(MemorySegment struct) {
        return struct.asSlice(id$OFFSET, id$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_oid id
     * }
     */
    public static void id(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, id$OFFSET, id$LAYOUT.byteSize());
    }

    private static final OfInt filemode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("filemode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_filemode_t filemode
     * }
     */
    public static final OfInt filemode$layout() {
        return filemode$LAYOUT;
    }

    private static final long filemode$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_filemode_t filemode
     * }
     */
    public static final long filemode$offset() {
        return filemode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_filemode_t filemode
     * }
     */
    public static int filemode(MemorySegment struct) {
        return struct.get(filemode$LAYOUT, filemode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_filemode_t filemode
     * }
     */
    public static void filemode(MemorySegment struct, int fieldValue) {
        struct.set(filemode$LAYOUT, filemode$OFFSET, fieldValue);
    }

    private static final AddressLayout path$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *path
     * }
     */
    public static final AddressLayout path$layout() {
        return path$LAYOUT;
    }

    private static final long path$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *path
     * }
     */
    public static final long path$offset() {
        return path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *path
     * }
     */
    public static MemorySegment path(MemorySegment struct) {
        return struct.get(path$LAYOUT, path$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *path
     * }
     */
    public static void path(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(path$LAYOUT, path$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

