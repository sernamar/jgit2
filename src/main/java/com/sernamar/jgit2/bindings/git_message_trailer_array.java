// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     git_message_trailer *trailers;
 *     size_t count;
 *     char *_trailer_block;
 * }
 * }
 */
public class git_message_trailer_array {

    git_message_trailer_array() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_POINTER.withName("trailers"),
        git2.C_LONG.withName("count"),
        git2.C_POINTER.withName("_trailer_block")
    ).withName("$anon$54:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout trailers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("trailers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_message_trailer *trailers
     * }
     */
    public static final AddressLayout trailers$layout() {
        return trailers$LAYOUT;
    }

    private static final long trailers$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_message_trailer *trailers
     * }
     */
    public static final long trailers$offset() {
        return trailers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_message_trailer *trailers
     * }
     */
    public static MemorySegment trailers(MemorySegment struct) {
        return struct.get(trailers$LAYOUT, trailers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_message_trailer *trailers
     * }
     */
    public static void trailers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(trailers$LAYOUT, trailers$OFFSET, fieldValue);
    }

    private static final OfLong count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t count
     * }
     */
    public static final OfLong count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t count
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t count
     * }
     */
    public static long count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t count
     * }
     */
    public static void count(MemorySegment struct, long fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    private static final AddressLayout _trailer_block$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_trailer_block"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *_trailer_block
     * }
     */
    public static final AddressLayout _trailer_block$layout() {
        return _trailer_block$LAYOUT;
    }

    private static final long _trailer_block$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *_trailer_block
     * }
     */
    public static final long _trailer_block$offset() {
        return _trailer_block$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *_trailer_block
     * }
     */
    public static MemorySegment _trailer_block(MemorySegment struct) {
        return struct.get(_trailer_block$LAYOUT, _trailer_block$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *_trailer_block
     * }
     */
    public static void _trailer_block(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_trailer_block$LAYOUT, _trailer_block$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

