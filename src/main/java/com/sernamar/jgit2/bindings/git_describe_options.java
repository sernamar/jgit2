// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct git_describe_options {
 *     unsigned int version;
 *     unsigned int max_candidates_tags;
 *     unsigned int describe_strategy;
 *     const char *pattern;
 *     int only_follow_first_parent;
 *     int show_commit_oid_as_fallback;
 * }
 * }
 */
public class git_describe_options {

    git_describe_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("max_candidates_tags"),
        git2.C_INT.withName("describe_strategy"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("pattern"),
        git2.C_INT.withName("only_follow_first_parent"),
        git2.C_INT.withName("show_commit_oid_as_fallback")
    ).withName("git_describe_options");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt max_candidates_tags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_candidates_tags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int max_candidates_tags
     * }
     */
    public static final OfInt max_candidates_tags$layout() {
        return max_candidates_tags$LAYOUT;
    }

    private static final long max_candidates_tags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int max_candidates_tags
     * }
     */
    public static final long max_candidates_tags$offset() {
        return max_candidates_tags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int max_candidates_tags
     * }
     */
    public static int max_candidates_tags(MemorySegment struct) {
        return struct.get(max_candidates_tags$LAYOUT, max_candidates_tags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int max_candidates_tags
     * }
     */
    public static void max_candidates_tags(MemorySegment struct, int fieldValue) {
        struct.set(max_candidates_tags$LAYOUT, max_candidates_tags$OFFSET, fieldValue);
    }

    private static final OfInt describe_strategy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("describe_strategy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int describe_strategy
     * }
     */
    public static final OfInt describe_strategy$layout() {
        return describe_strategy$LAYOUT;
    }

    private static final long describe_strategy$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int describe_strategy
     * }
     */
    public static final long describe_strategy$offset() {
        return describe_strategy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int describe_strategy
     * }
     */
    public static int describe_strategy(MemorySegment struct) {
        return struct.get(describe_strategy$LAYOUT, describe_strategy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int describe_strategy
     * }
     */
    public static void describe_strategy(MemorySegment struct, int fieldValue) {
        struct.set(describe_strategy$LAYOUT, describe_strategy$OFFSET, fieldValue);
    }

    private static final AddressLayout pattern$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pattern"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *pattern
     * }
     */
    public static final AddressLayout pattern$layout() {
        return pattern$LAYOUT;
    }

    private static final long pattern$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *pattern
     * }
     */
    public static final long pattern$offset() {
        return pattern$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *pattern
     * }
     */
    public static MemorySegment pattern(MemorySegment struct) {
        return struct.get(pattern$LAYOUT, pattern$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *pattern
     * }
     */
    public static void pattern(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pattern$LAYOUT, pattern$OFFSET, fieldValue);
    }

    private static final OfInt only_follow_first_parent$LAYOUT = (OfInt)$LAYOUT.select(groupElement("only_follow_first_parent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int only_follow_first_parent
     * }
     */
    public static final OfInt only_follow_first_parent$layout() {
        return only_follow_first_parent$LAYOUT;
    }

    private static final long only_follow_first_parent$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int only_follow_first_parent
     * }
     */
    public static final long only_follow_first_parent$offset() {
        return only_follow_first_parent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int only_follow_first_parent
     * }
     */
    public static int only_follow_first_parent(MemorySegment struct) {
        return struct.get(only_follow_first_parent$LAYOUT, only_follow_first_parent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int only_follow_first_parent
     * }
     */
    public static void only_follow_first_parent(MemorySegment struct, int fieldValue) {
        struct.set(only_follow_first_parent$LAYOUT, only_follow_first_parent$OFFSET, fieldValue);
    }

    private static final OfInt show_commit_oid_as_fallback$LAYOUT = (OfInt)$LAYOUT.select(groupElement("show_commit_oid_as_fallback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int show_commit_oid_as_fallback
     * }
     */
    public static final OfInt show_commit_oid_as_fallback$layout() {
        return show_commit_oid_as_fallback$LAYOUT;
    }

    private static final long show_commit_oid_as_fallback$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int show_commit_oid_as_fallback
     * }
     */
    public static final long show_commit_oid_as_fallback$offset() {
        return show_commit_oid_as_fallback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int show_commit_oid_as_fallback
     * }
     */
    public static int show_commit_oid_as_fallback(MemorySegment struct) {
        return struct.get(show_commit_oid_as_fallback$LAYOUT, show_commit_oid_as_fallback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int show_commit_oid_as_fallback
     * }
     */
    public static void show_commit_oid_as_fallback(MemorySegment struct, int fieldValue) {
        struct.set(show_commit_oid_as_fallback$LAYOUT, show_commit_oid_as_fallback$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

