// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct git_remote_head {
 *     int local;
 *     git_oid oid;
 *     git_oid loid;
 *     char *name;
 *     char *symref_target;
 * }
 * }
 */
public class git_remote_head {

    git_remote_head() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("local"),
        git_oid.layout().withName("oid"),
        git_oid.layout().withName("loid"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("name"),
        git2.C_POINTER.withName("symref_target")
    ).withName("git_remote_head");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt local$LAYOUT = (OfInt)$LAYOUT.select(groupElement("local"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int local
     * }
     */
    public static final OfInt local$layout() {
        return local$LAYOUT;
    }

    private static final long local$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int local
     * }
     */
    public static final long local$offset() {
        return local$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int local
     * }
     */
    public static int local(MemorySegment struct) {
        return struct.get(local$LAYOUT, local$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int local
     * }
     */
    public static void local(MemorySegment struct, int fieldValue) {
        struct.set(local$LAYOUT, local$OFFSET, fieldValue);
    }

    private static final GroupLayout oid$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("oid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_oid oid
     * }
     */
    public static final GroupLayout oid$layout() {
        return oid$LAYOUT;
    }

    private static final long oid$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_oid oid
     * }
     */
    public static final long oid$offset() {
        return oid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_oid oid
     * }
     */
    public static MemorySegment oid(MemorySegment struct) {
        return struct.asSlice(oid$OFFSET, oid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_oid oid
     * }
     */
    public static void oid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, oid$OFFSET, oid$LAYOUT.byteSize());
    }

    private static final GroupLayout loid$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("loid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_oid loid
     * }
     */
    public static final GroupLayout loid$layout() {
        return loid$LAYOUT;
    }

    private static final long loid$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_oid loid
     * }
     */
    public static final long loid$offset() {
        return loid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_oid loid
     * }
     */
    public static MemorySegment loid(MemorySegment struct) {
        return struct.asSlice(loid$OFFSET, loid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_oid loid
     * }
     */
    public static void loid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, loid$OFFSET, loid$LAYOUT.byteSize());
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout symref_target$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("symref_target"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *symref_target
     * }
     */
    public static final AddressLayout symref_target$layout() {
        return symref_target$LAYOUT;
    }

    private static final long symref_target$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *symref_target
     * }
     */
    public static final long symref_target$offset() {
        return symref_target$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *symref_target
     * }
     */
    public static MemorySegment symref_target(MemorySegment struct) {
        return struct.get(symref_target$LAYOUT, symref_target$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *symref_target
     * }
     */
    public static void symref_target(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(symref_target$LAYOUT, symref_target$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

