// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int version;
 *     git_apply_delta_cb delta_cb;
 *     git_apply_hunk_cb hunk_cb;
 *     void *payload;
 *     unsigned int flags;
 * }
 * }
 */
public class git_apply_options {

    git_apply_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("delta_cb"),
        git2.C_POINTER.withName("hunk_cb"),
        git2.C_POINTER.withName("payload"),
        git2.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$95:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final AddressLayout delta_cb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("delta_cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_apply_delta_cb delta_cb
     * }
     */
    public static final AddressLayout delta_cb$layout() {
        return delta_cb$LAYOUT;
    }

    private static final long delta_cb$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_apply_delta_cb delta_cb
     * }
     */
    public static final long delta_cb$offset() {
        return delta_cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_apply_delta_cb delta_cb
     * }
     */
    public static MemorySegment delta_cb(MemorySegment struct) {
        return struct.get(delta_cb$LAYOUT, delta_cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_apply_delta_cb delta_cb
     * }
     */
    public static void delta_cb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(delta_cb$LAYOUT, delta_cb$OFFSET, fieldValue);
    }

    private static final AddressLayout hunk_cb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hunk_cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_apply_hunk_cb hunk_cb
     * }
     */
    public static final AddressLayout hunk_cb$layout() {
        return hunk_cb$LAYOUT;
    }

    private static final long hunk_cb$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_apply_hunk_cb hunk_cb
     * }
     */
    public static final long hunk_cb$offset() {
        return hunk_cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_apply_hunk_cb hunk_cb
     * }
     */
    public static MemorySegment hunk_cb(MemorySegment struct) {
        return struct.get(hunk_cb$LAYOUT, hunk_cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_apply_hunk_cb hunk_cb
     * }
     */
    public static void hunk_cb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hunk_cb$LAYOUT, hunk_cb$OFFSET, fieldValue);
    }

    private static final AddressLayout payload$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("payload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static final AddressLayout payload$layout() {
        return payload$LAYOUT;
    }

    private static final long payload$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static final long payload$offset() {
        return payload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static MemorySegment payload(MemorySegment struct) {
        return struct.get(payload$LAYOUT, payload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static void payload(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(payload$LAYOUT, payload$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

