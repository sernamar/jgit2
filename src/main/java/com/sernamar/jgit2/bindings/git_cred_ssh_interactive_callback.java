// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * typedef git_credential_ssh_interactive_cb git_cred_ssh_interactive_callback
 * }
 */
public class git_cred_ssh_interactive_callback {

    git_cred_ssh_interactive_callback() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        void apply(MemorySegment _x0, int _x1, MemorySegment _x2, int _x3, int _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
        git2.C_POINTER,
        git2.C_INT,
        git2.C_POINTER,
        git2.C_INT,
        git2.C_INT,
        git2.C_POINTER,
        git2.C_POINTER,
        git2.C_POINTER
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = git2.upcallHandle(git_cred_ssh_interactive_callback.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(git_cred_ssh_interactive_callback.Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, int _x3, int _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7) {
        try {
             DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}

