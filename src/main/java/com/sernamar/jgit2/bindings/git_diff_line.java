// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     char origin;
 *     int old_lineno;
 *     int new_lineno;
 *     int num_lines;
 *     size_t content_len;
 *     git_off_t content_offset;
 *     const char *content;
 * }
 * }
 */
public class git_diff_line {

    git_diff_line() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_CHAR.withName("origin"),
        MemoryLayout.paddingLayout(3),
        git2.C_INT.withName("old_lineno"),
        git2.C_INT.withName("new_lineno"),
        git2.C_INT.withName("num_lines"),
        git2.C_LONG.withName("content_len"),
        git2.C_LONG.withName("content_offset"),
        git2.C_POINTER.withName("content")
    ).withName("$anon$650:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte origin$LAYOUT = (OfByte)$LAYOUT.select(groupElement("origin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char origin
     * }
     */
    public static final OfByte origin$layout() {
        return origin$LAYOUT;
    }

    private static final long origin$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char origin
     * }
     */
    public static final long origin$offset() {
        return origin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char origin
     * }
     */
    public static byte origin(MemorySegment struct) {
        return struct.get(origin$LAYOUT, origin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char origin
     * }
     */
    public static void origin(MemorySegment struct, byte fieldValue) {
        struct.set(origin$LAYOUT, origin$OFFSET, fieldValue);
    }

    private static final OfInt old_lineno$LAYOUT = (OfInt)$LAYOUT.select(groupElement("old_lineno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int old_lineno
     * }
     */
    public static final OfInt old_lineno$layout() {
        return old_lineno$LAYOUT;
    }

    private static final long old_lineno$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int old_lineno
     * }
     */
    public static final long old_lineno$offset() {
        return old_lineno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int old_lineno
     * }
     */
    public static int old_lineno(MemorySegment struct) {
        return struct.get(old_lineno$LAYOUT, old_lineno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int old_lineno
     * }
     */
    public static void old_lineno(MemorySegment struct, int fieldValue) {
        struct.set(old_lineno$LAYOUT, old_lineno$OFFSET, fieldValue);
    }

    private static final OfInt new_lineno$LAYOUT = (OfInt)$LAYOUT.select(groupElement("new_lineno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int new_lineno
     * }
     */
    public static final OfInt new_lineno$layout() {
        return new_lineno$LAYOUT;
    }

    private static final long new_lineno$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int new_lineno
     * }
     */
    public static final long new_lineno$offset() {
        return new_lineno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int new_lineno
     * }
     */
    public static int new_lineno(MemorySegment struct) {
        return struct.get(new_lineno$LAYOUT, new_lineno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int new_lineno
     * }
     */
    public static void new_lineno(MemorySegment struct, int fieldValue) {
        struct.set(new_lineno$LAYOUT, new_lineno$OFFSET, fieldValue);
    }

    private static final OfInt num_lines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("num_lines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int num_lines
     * }
     */
    public static final OfInt num_lines$layout() {
        return num_lines$LAYOUT;
    }

    private static final long num_lines$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int num_lines
     * }
     */
    public static final long num_lines$offset() {
        return num_lines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int num_lines
     * }
     */
    public static int num_lines(MemorySegment struct) {
        return struct.get(num_lines$LAYOUT, num_lines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int num_lines
     * }
     */
    public static void num_lines(MemorySegment struct, int fieldValue) {
        struct.set(num_lines$LAYOUT, num_lines$OFFSET, fieldValue);
    }

    private static final OfLong content_len$LAYOUT = (OfLong)$LAYOUT.select(groupElement("content_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t content_len
     * }
     */
    public static final OfLong content_len$layout() {
        return content_len$LAYOUT;
    }

    private static final long content_len$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t content_len
     * }
     */
    public static final long content_len$offset() {
        return content_len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t content_len
     * }
     */
    public static long content_len(MemorySegment struct) {
        return struct.get(content_len$LAYOUT, content_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t content_len
     * }
     */
    public static void content_len(MemorySegment struct, long fieldValue) {
        struct.set(content_len$LAYOUT, content_len$OFFSET, fieldValue);
    }

    private static final OfLong content_offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("content_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_off_t content_offset
     * }
     */
    public static final OfLong content_offset$layout() {
        return content_offset$LAYOUT;
    }

    private static final long content_offset$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_off_t content_offset
     * }
     */
    public static final long content_offset$offset() {
        return content_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_off_t content_offset
     * }
     */
    public static long content_offset(MemorySegment struct) {
        return struct.get(content_offset$LAYOUT, content_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_off_t content_offset
     * }
     */
    public static void content_offset(MemorySegment struct, long fieldValue) {
        struct.set(content_offset$LAYOUT, content_offset$OFFSET, fieldValue);
    }

    private static final AddressLayout content$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("content"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *content
     * }
     */
    public static final AddressLayout content$layout() {
        return content$LAYOUT;
    }

    private static final long content$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *content
     * }
     */
    public static final long content$offset() {
        return content$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *content
     * }
     */
    public static MemorySegment content(MemorySegment struct) {
        return struct.get(content$LAYOUT, content$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *content
     * }
     */
    public static void content(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(content$LAYOUT, content$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

