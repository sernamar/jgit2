// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct git_odb_stream {
 *     git_odb_backend *backend;
 *     unsigned int mode;
 *     void *hash_ctx;
 *     git_object_size_t declared_size;
 *     git_object_size_t received_bytes;
 *     int (*read)(git_odb_stream *, char *, size_t);
 *     int (*write)(git_odb_stream *, const char *, size_t);
 *     int (*finalize_write)(git_odb_stream *, const git_oid *);
 *     void (*free)(git_odb_stream *);
 * }
 * }
 */
public class git_odb_stream {

    git_odb_stream() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_POINTER.withName("backend"),
        git2.C_INT.withName("mode"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("hash_ctx"),
        git2.C_LONG.withName("declared_size"),
        git2.C_LONG.withName("received_bytes"),
        git2.C_POINTER.withName("read"),
        git2.C_POINTER.withName("write"),
        git2.C_POINTER.withName("finalize_write"),
        git2.C_POINTER.withName("free")
    ).withName("git_odb_stream");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout backend$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("backend"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_odb_backend *backend
     * }
     */
    public static final AddressLayout backend$layout() {
        return backend$LAYOUT;
    }

    private static final long backend$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_odb_backend *backend
     * }
     */
    public static final long backend$offset() {
        return backend$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_odb_backend *backend
     * }
     */
    public static MemorySegment backend(MemorySegment struct) {
        return struct.get(backend$LAYOUT, backend$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_odb_backend *backend
     * }
     */
    public static void backend(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(backend$LAYOUT, backend$OFFSET, fieldValue);
    }

    private static final OfInt mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int mode
     * }
     */
    public static final OfInt mode$layout() {
        return mode$LAYOUT;
    }

    private static final long mode$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int mode
     * }
     */
    public static final long mode$offset() {
        return mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int mode
     * }
     */
    public static int mode(MemorySegment struct) {
        return struct.get(mode$LAYOUT, mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int mode
     * }
     */
    public static void mode(MemorySegment struct, int fieldValue) {
        struct.set(mode$LAYOUT, mode$OFFSET, fieldValue);
    }

    private static final AddressLayout hash_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hash_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *hash_ctx
     * }
     */
    public static final AddressLayout hash_ctx$layout() {
        return hash_ctx$LAYOUT;
    }

    private static final long hash_ctx$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *hash_ctx
     * }
     */
    public static final long hash_ctx$offset() {
        return hash_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *hash_ctx
     * }
     */
    public static MemorySegment hash_ctx(MemorySegment struct) {
        return struct.get(hash_ctx$LAYOUT, hash_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *hash_ctx
     * }
     */
    public static void hash_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hash_ctx$LAYOUT, hash_ctx$OFFSET, fieldValue);
    }

    private static final OfLong declared_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("declared_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_object_size_t declared_size
     * }
     */
    public static final OfLong declared_size$layout() {
        return declared_size$LAYOUT;
    }

    private static final long declared_size$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_object_size_t declared_size
     * }
     */
    public static final long declared_size$offset() {
        return declared_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_object_size_t declared_size
     * }
     */
    public static long declared_size(MemorySegment struct) {
        return struct.get(declared_size$LAYOUT, declared_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_object_size_t declared_size
     * }
     */
    public static void declared_size(MemorySegment struct, long fieldValue) {
        struct.set(declared_size$LAYOUT, declared_size$OFFSET, fieldValue);
    }

    private static final OfLong received_bytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("received_bytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_object_size_t received_bytes
     * }
     */
    public static final OfLong received_bytes$layout() {
        return received_bytes$LAYOUT;
    }

    private static final long received_bytes$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_object_size_t received_bytes
     * }
     */
    public static final long received_bytes$offset() {
        return received_bytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_object_size_t received_bytes
     * }
     */
    public static long received_bytes(MemorySegment struct) {
        return struct.get(received_bytes$LAYOUT, received_bytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_object_size_t received_bytes
     * }
     */
    public static void received_bytes(MemorySegment struct, long fieldValue) {
        struct.set(received_bytes$LAYOUT, received_bytes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*read)(git_odb_stream *, char *, size_t)
     * }
     */
    public static class read {

        read() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            git2.C_INT,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(read.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*read)(git_odb_stream *, char *, size_t)
     * }
     */
    public static final AddressLayout read$layout() {
        return read$LAYOUT;
    }

    private static final long read$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*read)(git_odb_stream *, char *, size_t)
     * }
     */
    public static final long read$offset() {
        return read$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*read)(git_odb_stream *, char *, size_t)
     * }
     */
    public static MemorySegment read(MemorySegment struct) {
        return struct.get(read$LAYOUT, read$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*read)(git_odb_stream *, char *, size_t)
     * }
     */
    public static void read(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read$LAYOUT, read$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*write)(git_odb_stream *, const char *, size_t)
     * }
     */
    public static class write {

        write() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            git2.C_INT,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(write.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(write.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout write$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("write"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*write)(git_odb_stream *, const char *, size_t)
     * }
     */
    public static final AddressLayout write$layout() {
        return write$LAYOUT;
    }

    private static final long write$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*write)(git_odb_stream *, const char *, size_t)
     * }
     */
    public static final long write$offset() {
        return write$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*write)(git_odb_stream *, const char *, size_t)
     * }
     */
    public static MemorySegment write(MemorySegment struct) {
        return struct.get(write$LAYOUT, write$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*write)(git_odb_stream *, const char *, size_t)
     * }
     */
    public static void write(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(write$LAYOUT, write$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*finalize_write)(git_odb_stream *, const git_oid *)
     * }
     */
    public static class finalize_write {

        finalize_write() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            git2.C_INT,
            git2.C_POINTER,
            git2.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(finalize_write.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(finalize_write.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout finalize_write$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("finalize_write"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*finalize_write)(git_odb_stream *, const git_oid *)
     * }
     */
    public static final AddressLayout finalize_write$layout() {
        return finalize_write$LAYOUT;
    }

    private static final long finalize_write$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*finalize_write)(git_odb_stream *, const git_oid *)
     * }
     */
    public static final long finalize_write$offset() {
        return finalize_write$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*finalize_write)(git_odb_stream *, const git_oid *)
     * }
     */
    public static MemorySegment finalize_write(MemorySegment struct) {
        return struct.get(finalize_write$LAYOUT, finalize_write$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*finalize_write)(git_odb_stream *, const git_oid *)
     * }
     */
    public static void finalize_write(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(finalize_write$LAYOUT, finalize_write$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*free)(git_odb_stream *)
     * }
     */
    public static class free {

        free() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            git2.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(free.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(free.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*free)(git_odb_stream *)
     * }
     */
    public static final AddressLayout free$layout() {
        return free$LAYOUT;
    }

    private static final long free$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*free)(git_odb_stream *)
     * }
     */
    public static final long free$offset() {
        return free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*free)(git_odb_stream *)
     * }
     */
    public static MemorySegment free(MemorySegment struct) {
        return struct.get(free$LAYOUT, free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*free)(git_odb_stream *)
     * }
     */
    public static void free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free$LAYOUT, free$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

