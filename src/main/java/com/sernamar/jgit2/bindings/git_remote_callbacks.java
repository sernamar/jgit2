// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct git_remote_callbacks {
 *     unsigned int version;
 *     git_transport_message_cb sideband_progress;
 *     int (*completion)(git_remote_completion_t, void *);
 *     git_credential_acquire_cb credentials;
 *     git_transport_certificate_check_cb certificate_check;
 *     git_indexer_progress_cb transfer_progress;
 *     int (*update_tips)(const char *, const git_oid *, const git_oid *, void *);
 *     git_packbuilder_progress pack_progress;
 *     git_push_transfer_progress_cb push_transfer_progress;
 *     git_push_update_reference_cb push_update_reference;
 *     git_push_negotiation push_negotiation;
 *     git_transport_cb transport;
 *     git_remote_ready_cb remote_ready;
 *     void *payload;
 *     git_url_resolve_cb resolve_url;
 *     int (*update_refs)(const char *, const git_oid *, const git_oid *, git_refspec *, void *);
 * }
 * }
 */
public class git_remote_callbacks {

    git_remote_callbacks() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("sideband_progress"),
        git2.C_POINTER.withName("completion"),
        git2.C_POINTER.withName("credentials"),
        git2.C_POINTER.withName("certificate_check"),
        git2.C_POINTER.withName("transfer_progress"),
        git2.C_POINTER.withName("update_tips"),
        git2.C_POINTER.withName("pack_progress"),
        git2.C_POINTER.withName("push_transfer_progress"),
        git2.C_POINTER.withName("push_update_reference"),
        git2.C_POINTER.withName("push_negotiation"),
        git2.C_POINTER.withName("transport"),
        git2.C_POINTER.withName("remote_ready"),
        git2.C_POINTER.withName("payload"),
        git2.C_POINTER.withName("resolve_url"),
        git2.C_POINTER.withName("update_refs")
    ).withName("git_remote_callbacks");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final AddressLayout sideband_progress$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sideband_progress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_transport_message_cb sideband_progress
     * }
     */
    public static final AddressLayout sideband_progress$layout() {
        return sideband_progress$LAYOUT;
    }

    private static final long sideband_progress$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_transport_message_cb sideband_progress
     * }
     */
    public static final long sideband_progress$offset() {
        return sideband_progress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_transport_message_cb sideband_progress
     * }
     */
    public static MemorySegment sideband_progress(MemorySegment struct) {
        return struct.get(sideband_progress$LAYOUT, sideband_progress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_transport_message_cb sideband_progress
     * }
     */
    public static void sideband_progress(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sideband_progress$LAYOUT, sideband_progress$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*completion)(git_remote_completion_t, void *)
     * }
     */
    public static class completion {

        completion() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(int _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            git2.C_INT,
            git2.C_INT,
            git2.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(completion.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(completion.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,int _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout completion$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("completion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*completion)(git_remote_completion_t, void *)
     * }
     */
    public static final AddressLayout completion$layout() {
        return completion$LAYOUT;
    }

    private static final long completion$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*completion)(git_remote_completion_t, void *)
     * }
     */
    public static final long completion$offset() {
        return completion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*completion)(git_remote_completion_t, void *)
     * }
     */
    public static MemorySegment completion(MemorySegment struct) {
        return struct.get(completion$LAYOUT, completion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*completion)(git_remote_completion_t, void *)
     * }
     */
    public static void completion(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(completion$LAYOUT, completion$OFFSET, fieldValue);
    }

    private static final AddressLayout credentials$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("credentials"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_credential_acquire_cb credentials
     * }
     */
    public static final AddressLayout credentials$layout() {
        return credentials$LAYOUT;
    }

    private static final long credentials$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_credential_acquire_cb credentials
     * }
     */
    public static final long credentials$offset() {
        return credentials$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_credential_acquire_cb credentials
     * }
     */
    public static MemorySegment credentials(MemorySegment struct) {
        return struct.get(credentials$LAYOUT, credentials$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_credential_acquire_cb credentials
     * }
     */
    public static void credentials(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(credentials$LAYOUT, credentials$OFFSET, fieldValue);
    }

    private static final AddressLayout certificate_check$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("certificate_check"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_transport_certificate_check_cb certificate_check
     * }
     */
    public static final AddressLayout certificate_check$layout() {
        return certificate_check$LAYOUT;
    }

    private static final long certificate_check$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_transport_certificate_check_cb certificate_check
     * }
     */
    public static final long certificate_check$offset() {
        return certificate_check$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_transport_certificate_check_cb certificate_check
     * }
     */
    public static MemorySegment certificate_check(MemorySegment struct) {
        return struct.get(certificate_check$LAYOUT, certificate_check$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_transport_certificate_check_cb certificate_check
     * }
     */
    public static void certificate_check(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(certificate_check$LAYOUT, certificate_check$OFFSET, fieldValue);
    }

    private static final AddressLayout transfer_progress$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("transfer_progress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_indexer_progress_cb transfer_progress
     * }
     */
    public static final AddressLayout transfer_progress$layout() {
        return transfer_progress$LAYOUT;
    }

    private static final long transfer_progress$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_indexer_progress_cb transfer_progress
     * }
     */
    public static final long transfer_progress$offset() {
        return transfer_progress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_indexer_progress_cb transfer_progress
     * }
     */
    public static MemorySegment transfer_progress(MemorySegment struct) {
        return struct.get(transfer_progress$LAYOUT, transfer_progress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_indexer_progress_cb transfer_progress
     * }
     */
    public static void transfer_progress(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(transfer_progress$LAYOUT, transfer_progress$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*update_tips)(const char *, const git_oid *, const git_oid *, void *)
     * }
     */
    public static class update_tips {

        update_tips() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            git2.C_INT,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(update_tips.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(update_tips.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout update_tips$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("update_tips"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*update_tips)(const char *, const git_oid *, const git_oid *, void *)
     * }
     */
    public static final AddressLayout update_tips$layout() {
        return update_tips$LAYOUT;
    }

    private static final long update_tips$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*update_tips)(const char *, const git_oid *, const git_oid *, void *)
     * }
     */
    public static final long update_tips$offset() {
        return update_tips$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*update_tips)(const char *, const git_oid *, const git_oid *, void *)
     * }
     */
    public static MemorySegment update_tips(MemorySegment struct) {
        return struct.get(update_tips$LAYOUT, update_tips$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*update_tips)(const char *, const git_oid *, const git_oid *, void *)
     * }
     */
    public static void update_tips(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(update_tips$LAYOUT, update_tips$OFFSET, fieldValue);
    }

    private static final AddressLayout pack_progress$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pack_progress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_packbuilder_progress pack_progress
     * }
     */
    public static final AddressLayout pack_progress$layout() {
        return pack_progress$LAYOUT;
    }

    private static final long pack_progress$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_packbuilder_progress pack_progress
     * }
     */
    public static final long pack_progress$offset() {
        return pack_progress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_packbuilder_progress pack_progress
     * }
     */
    public static MemorySegment pack_progress(MemorySegment struct) {
        return struct.get(pack_progress$LAYOUT, pack_progress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_packbuilder_progress pack_progress
     * }
     */
    public static void pack_progress(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pack_progress$LAYOUT, pack_progress$OFFSET, fieldValue);
    }

    private static final AddressLayout push_transfer_progress$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("push_transfer_progress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_push_transfer_progress_cb push_transfer_progress
     * }
     */
    public static final AddressLayout push_transfer_progress$layout() {
        return push_transfer_progress$LAYOUT;
    }

    private static final long push_transfer_progress$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_push_transfer_progress_cb push_transfer_progress
     * }
     */
    public static final long push_transfer_progress$offset() {
        return push_transfer_progress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_push_transfer_progress_cb push_transfer_progress
     * }
     */
    public static MemorySegment push_transfer_progress(MemorySegment struct) {
        return struct.get(push_transfer_progress$LAYOUT, push_transfer_progress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_push_transfer_progress_cb push_transfer_progress
     * }
     */
    public static void push_transfer_progress(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(push_transfer_progress$LAYOUT, push_transfer_progress$OFFSET, fieldValue);
    }

    private static final AddressLayout push_update_reference$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("push_update_reference"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_push_update_reference_cb push_update_reference
     * }
     */
    public static final AddressLayout push_update_reference$layout() {
        return push_update_reference$LAYOUT;
    }

    private static final long push_update_reference$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_push_update_reference_cb push_update_reference
     * }
     */
    public static final long push_update_reference$offset() {
        return push_update_reference$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_push_update_reference_cb push_update_reference
     * }
     */
    public static MemorySegment push_update_reference(MemorySegment struct) {
        return struct.get(push_update_reference$LAYOUT, push_update_reference$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_push_update_reference_cb push_update_reference
     * }
     */
    public static void push_update_reference(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(push_update_reference$LAYOUT, push_update_reference$OFFSET, fieldValue);
    }

    private static final AddressLayout push_negotiation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("push_negotiation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_push_negotiation push_negotiation
     * }
     */
    public static final AddressLayout push_negotiation$layout() {
        return push_negotiation$LAYOUT;
    }

    private static final long push_negotiation$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_push_negotiation push_negotiation
     * }
     */
    public static final long push_negotiation$offset() {
        return push_negotiation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_push_negotiation push_negotiation
     * }
     */
    public static MemorySegment push_negotiation(MemorySegment struct) {
        return struct.get(push_negotiation$LAYOUT, push_negotiation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_push_negotiation push_negotiation
     * }
     */
    public static void push_negotiation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(push_negotiation$LAYOUT, push_negotiation$OFFSET, fieldValue);
    }

    private static final AddressLayout transport$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("transport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_transport_cb transport
     * }
     */
    public static final AddressLayout transport$layout() {
        return transport$LAYOUT;
    }

    private static final long transport$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_transport_cb transport
     * }
     */
    public static final long transport$offset() {
        return transport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_transport_cb transport
     * }
     */
    public static MemorySegment transport(MemorySegment struct) {
        return struct.get(transport$LAYOUT, transport$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_transport_cb transport
     * }
     */
    public static void transport(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(transport$LAYOUT, transport$OFFSET, fieldValue);
    }

    private static final AddressLayout remote_ready$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("remote_ready"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_remote_ready_cb remote_ready
     * }
     */
    public static final AddressLayout remote_ready$layout() {
        return remote_ready$LAYOUT;
    }

    private static final long remote_ready$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_remote_ready_cb remote_ready
     * }
     */
    public static final long remote_ready$offset() {
        return remote_ready$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_remote_ready_cb remote_ready
     * }
     */
    public static MemorySegment remote_ready(MemorySegment struct) {
        return struct.get(remote_ready$LAYOUT, remote_ready$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_remote_ready_cb remote_ready
     * }
     */
    public static void remote_ready(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(remote_ready$LAYOUT, remote_ready$OFFSET, fieldValue);
    }

    private static final AddressLayout payload$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("payload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static final AddressLayout payload$layout() {
        return payload$LAYOUT;
    }

    private static final long payload$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static final long payload$offset() {
        return payload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static MemorySegment payload(MemorySegment struct) {
        return struct.get(payload$LAYOUT, payload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static void payload(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(payload$LAYOUT, payload$OFFSET, fieldValue);
    }

    private static final AddressLayout resolve_url$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("resolve_url"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_url_resolve_cb resolve_url
     * }
     */
    public static final AddressLayout resolve_url$layout() {
        return resolve_url$LAYOUT;
    }

    private static final long resolve_url$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_url_resolve_cb resolve_url
     * }
     */
    public static final long resolve_url$offset() {
        return resolve_url$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_url_resolve_cb resolve_url
     * }
     */
    public static MemorySegment resolve_url(MemorySegment struct) {
        return struct.get(resolve_url$LAYOUT, resolve_url$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_url_resolve_cb resolve_url
     * }
     */
    public static void resolve_url(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(resolve_url$LAYOUT, resolve_url$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*update_refs)(const char *, const git_oid *, const git_oid *, git_refspec *, void *)
     * }
     */
    public static class update_refs {

        update_refs() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            git2.C_INT,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(update_refs.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(update_refs.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout update_refs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("update_refs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*update_refs)(const char *, const git_oid *, const git_oid *, git_refspec *, void *)
     * }
     */
    public static final AddressLayout update_refs$layout() {
        return update_refs$LAYOUT;
    }

    private static final long update_refs$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*update_refs)(const char *, const git_oid *, const git_oid *, git_refspec *, void *)
     * }
     */
    public static final long update_refs$offset() {
        return update_refs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*update_refs)(const char *, const git_oid *, const git_oid *, git_refspec *, void *)
     * }
     */
    public static MemorySegment update_refs(MemorySegment struct) {
        return struct.get(update_refs$LAYOUT, update_refs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*update_refs)(const char *, const git_oid *, const git_oid *, git_refspec *, void *)
     * }
     */
    public static void update_refs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(update_refs$LAYOUT, update_refs$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

