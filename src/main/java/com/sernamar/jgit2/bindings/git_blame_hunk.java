// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct git_blame_hunk {
 *     size_t lines_in_hunk;
 *     git_oid final_commit_id;
 *     size_t final_start_line_number;
 *     git_signature *final_signature;
 *     git_signature *final_committer;
 *     git_oid orig_commit_id;
 *     const char *orig_path;
 *     size_t orig_start_line_number;
 *     git_signature *orig_signature;
 *     git_signature *orig_committer;
 *     const char *summary;
 *     char boundary;
 * }
 * }
 */
public class git_blame_hunk {

    git_blame_hunk() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_LONG.withName("lines_in_hunk"),
        git_oid.layout().withName("final_commit_id"),
        MemoryLayout.paddingLayout(4),
        git2.C_LONG.withName("final_start_line_number"),
        git2.C_POINTER.withName("final_signature"),
        git2.C_POINTER.withName("final_committer"),
        git_oid.layout().withName("orig_commit_id"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("orig_path"),
        git2.C_LONG.withName("orig_start_line_number"),
        git2.C_POINTER.withName("orig_signature"),
        git2.C_POINTER.withName("orig_committer"),
        git2.C_POINTER.withName("summary"),
        git2.C_CHAR.withName("boundary"),
        MemoryLayout.paddingLayout(7)
    ).withName("git_blame_hunk");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong lines_in_hunk$LAYOUT = (OfLong)$LAYOUT.select(groupElement("lines_in_hunk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t lines_in_hunk
     * }
     */
    public static final OfLong lines_in_hunk$layout() {
        return lines_in_hunk$LAYOUT;
    }

    private static final long lines_in_hunk$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t lines_in_hunk
     * }
     */
    public static final long lines_in_hunk$offset() {
        return lines_in_hunk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t lines_in_hunk
     * }
     */
    public static long lines_in_hunk(MemorySegment struct) {
        return struct.get(lines_in_hunk$LAYOUT, lines_in_hunk$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t lines_in_hunk
     * }
     */
    public static void lines_in_hunk(MemorySegment struct, long fieldValue) {
        struct.set(lines_in_hunk$LAYOUT, lines_in_hunk$OFFSET, fieldValue);
    }

    private static final GroupLayout final_commit_id$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("final_commit_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_oid final_commit_id
     * }
     */
    public static final GroupLayout final_commit_id$layout() {
        return final_commit_id$LAYOUT;
    }

    private static final long final_commit_id$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_oid final_commit_id
     * }
     */
    public static final long final_commit_id$offset() {
        return final_commit_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_oid final_commit_id
     * }
     */
    public static MemorySegment final_commit_id(MemorySegment struct) {
        return struct.asSlice(final_commit_id$OFFSET, final_commit_id$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_oid final_commit_id
     * }
     */
    public static void final_commit_id(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, final_commit_id$OFFSET, final_commit_id$LAYOUT.byteSize());
    }

    private static final OfLong final_start_line_number$LAYOUT = (OfLong)$LAYOUT.select(groupElement("final_start_line_number"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t final_start_line_number
     * }
     */
    public static final OfLong final_start_line_number$layout() {
        return final_start_line_number$LAYOUT;
    }

    private static final long final_start_line_number$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t final_start_line_number
     * }
     */
    public static final long final_start_line_number$offset() {
        return final_start_line_number$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t final_start_line_number
     * }
     */
    public static long final_start_line_number(MemorySegment struct) {
        return struct.get(final_start_line_number$LAYOUT, final_start_line_number$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t final_start_line_number
     * }
     */
    public static void final_start_line_number(MemorySegment struct, long fieldValue) {
        struct.set(final_start_line_number$LAYOUT, final_start_line_number$OFFSET, fieldValue);
    }

    private static final AddressLayout final_signature$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("final_signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_signature *final_signature
     * }
     */
    public static final AddressLayout final_signature$layout() {
        return final_signature$LAYOUT;
    }

    private static final long final_signature$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_signature *final_signature
     * }
     */
    public static final long final_signature$offset() {
        return final_signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_signature *final_signature
     * }
     */
    public static MemorySegment final_signature(MemorySegment struct) {
        return struct.get(final_signature$LAYOUT, final_signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_signature *final_signature
     * }
     */
    public static void final_signature(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(final_signature$LAYOUT, final_signature$OFFSET, fieldValue);
    }

    private static final AddressLayout final_committer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("final_committer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_signature *final_committer
     * }
     */
    public static final AddressLayout final_committer$layout() {
        return final_committer$LAYOUT;
    }

    private static final long final_committer$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_signature *final_committer
     * }
     */
    public static final long final_committer$offset() {
        return final_committer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_signature *final_committer
     * }
     */
    public static MemorySegment final_committer(MemorySegment struct) {
        return struct.get(final_committer$LAYOUT, final_committer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_signature *final_committer
     * }
     */
    public static void final_committer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(final_committer$LAYOUT, final_committer$OFFSET, fieldValue);
    }

    private static final GroupLayout orig_commit_id$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("orig_commit_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_oid orig_commit_id
     * }
     */
    public static final GroupLayout orig_commit_id$layout() {
        return orig_commit_id$LAYOUT;
    }

    private static final long orig_commit_id$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_oid orig_commit_id
     * }
     */
    public static final long orig_commit_id$offset() {
        return orig_commit_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_oid orig_commit_id
     * }
     */
    public static MemorySegment orig_commit_id(MemorySegment struct) {
        return struct.asSlice(orig_commit_id$OFFSET, orig_commit_id$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_oid orig_commit_id
     * }
     */
    public static void orig_commit_id(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, orig_commit_id$OFFSET, orig_commit_id$LAYOUT.byteSize());
    }

    private static final AddressLayout orig_path$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("orig_path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *orig_path
     * }
     */
    public static final AddressLayout orig_path$layout() {
        return orig_path$LAYOUT;
    }

    private static final long orig_path$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *orig_path
     * }
     */
    public static final long orig_path$offset() {
        return orig_path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *orig_path
     * }
     */
    public static MemorySegment orig_path(MemorySegment struct) {
        return struct.get(orig_path$LAYOUT, orig_path$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *orig_path
     * }
     */
    public static void orig_path(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(orig_path$LAYOUT, orig_path$OFFSET, fieldValue);
    }

    private static final OfLong orig_start_line_number$LAYOUT = (OfLong)$LAYOUT.select(groupElement("orig_start_line_number"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t orig_start_line_number
     * }
     */
    public static final OfLong orig_start_line_number$layout() {
        return orig_start_line_number$LAYOUT;
    }

    private static final long orig_start_line_number$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t orig_start_line_number
     * }
     */
    public static final long orig_start_line_number$offset() {
        return orig_start_line_number$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t orig_start_line_number
     * }
     */
    public static long orig_start_line_number(MemorySegment struct) {
        return struct.get(orig_start_line_number$LAYOUT, orig_start_line_number$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t orig_start_line_number
     * }
     */
    public static void orig_start_line_number(MemorySegment struct, long fieldValue) {
        struct.set(orig_start_line_number$LAYOUT, orig_start_line_number$OFFSET, fieldValue);
    }

    private static final AddressLayout orig_signature$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("orig_signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_signature *orig_signature
     * }
     */
    public static final AddressLayout orig_signature$layout() {
        return orig_signature$LAYOUT;
    }

    private static final long orig_signature$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_signature *orig_signature
     * }
     */
    public static final long orig_signature$offset() {
        return orig_signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_signature *orig_signature
     * }
     */
    public static MemorySegment orig_signature(MemorySegment struct) {
        return struct.get(orig_signature$LAYOUT, orig_signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_signature *orig_signature
     * }
     */
    public static void orig_signature(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(orig_signature$LAYOUT, orig_signature$OFFSET, fieldValue);
    }

    private static final AddressLayout orig_committer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("orig_committer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_signature *orig_committer
     * }
     */
    public static final AddressLayout orig_committer$layout() {
        return orig_committer$LAYOUT;
    }

    private static final long orig_committer$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_signature *orig_committer
     * }
     */
    public static final long orig_committer$offset() {
        return orig_committer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_signature *orig_committer
     * }
     */
    public static MemorySegment orig_committer(MemorySegment struct) {
        return struct.get(orig_committer$LAYOUT, orig_committer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_signature *orig_committer
     * }
     */
    public static void orig_committer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(orig_committer$LAYOUT, orig_committer$OFFSET, fieldValue);
    }

    private static final AddressLayout summary$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("summary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *summary
     * }
     */
    public static final AddressLayout summary$layout() {
        return summary$LAYOUT;
    }

    private static final long summary$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *summary
     * }
     */
    public static final long summary$offset() {
        return summary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *summary
     * }
     */
    public static MemorySegment summary(MemorySegment struct) {
        return struct.get(summary$LAYOUT, summary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *summary
     * }
     */
    public static void summary(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(summary$LAYOUT, summary$OFFSET, fieldValue);
    }

    private static final OfByte boundary$LAYOUT = (OfByte)$LAYOUT.select(groupElement("boundary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char boundary
     * }
     */
    public static final OfByte boundary$layout() {
        return boundary$LAYOUT;
    }

    private static final long boundary$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char boundary
     * }
     */
    public static final long boundary$offset() {
        return boundary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char boundary
     * }
     */
    public static byte boundary(MemorySegment struct) {
        return struct.get(boundary$LAYOUT, boundary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char boundary
     * }
     */
    public static void boundary(MemorySegment struct, byte fieldValue) {
        struct.set(boundary$LAYOUT, boundary$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

