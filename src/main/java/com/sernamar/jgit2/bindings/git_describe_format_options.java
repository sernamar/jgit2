// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int version;
 *     unsigned int abbreviated_size;
 *     int always_use_long_format;
 *     const char *dirty_suffix;
 * }
 * }
 */
public class git_describe_format_options {

    git_describe_format_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("abbreviated_size"),
        git2.C_INT.withName("always_use_long_format"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("dirty_suffix")
    ).withName("$anon$100:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt abbreviated_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("abbreviated_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int abbreviated_size
     * }
     */
    public static final OfInt abbreviated_size$layout() {
        return abbreviated_size$LAYOUT;
    }

    private static final long abbreviated_size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int abbreviated_size
     * }
     */
    public static final long abbreviated_size$offset() {
        return abbreviated_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int abbreviated_size
     * }
     */
    public static int abbreviated_size(MemorySegment struct) {
        return struct.get(abbreviated_size$LAYOUT, abbreviated_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int abbreviated_size
     * }
     */
    public static void abbreviated_size(MemorySegment struct, int fieldValue) {
        struct.set(abbreviated_size$LAYOUT, abbreviated_size$OFFSET, fieldValue);
    }

    private static final OfInt always_use_long_format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("always_use_long_format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int always_use_long_format
     * }
     */
    public static final OfInt always_use_long_format$layout() {
        return always_use_long_format$LAYOUT;
    }

    private static final long always_use_long_format$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int always_use_long_format
     * }
     */
    public static final long always_use_long_format$offset() {
        return always_use_long_format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int always_use_long_format
     * }
     */
    public static int always_use_long_format(MemorySegment struct) {
        return struct.get(always_use_long_format$LAYOUT, always_use_long_format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int always_use_long_format
     * }
     */
    public static void always_use_long_format(MemorySegment struct, int fieldValue) {
        struct.set(always_use_long_format$LAYOUT, always_use_long_format$OFFSET, fieldValue);
    }

    private static final AddressLayout dirty_suffix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dirty_suffix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *dirty_suffix
     * }
     */
    public static final AddressLayout dirty_suffix$layout() {
        return dirty_suffix$LAYOUT;
    }

    private static final long dirty_suffix$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *dirty_suffix
     * }
     */
    public static final long dirty_suffix$offset() {
        return dirty_suffix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *dirty_suffix
     * }
     */
    public static MemorySegment dirty_suffix(MemorySegment struct) {
        return struct.get(dirty_suffix$LAYOUT, dirty_suffix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *dirty_suffix
     * }
     */
    public static void dirty_suffix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dirty_suffix$LAYOUT, dirty_suffix$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

