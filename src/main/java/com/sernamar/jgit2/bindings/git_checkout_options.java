// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct git_checkout_options {
 *     unsigned int version;
 *     unsigned int checkout_strategy;
 *     int disable_filters;
 *     unsigned int dir_mode;
 *     unsigned int file_mode;
 *     int file_open_flags;
 *     unsigned int notify_flags;
 *     git_checkout_notify_cb notify_cb;
 *     void *notify_payload;
 *     git_checkout_progress_cb progress_cb;
 *     void *progress_payload;
 *     git_strarray paths;
 *     git_tree *baseline;
 *     git_index *baseline_index;
 *     const char *target_directory;
 *     const char *ancestor_label;
 *     const char *our_label;
 *     const char *their_label;
 *     git_checkout_perfdata_cb perfdata_cb;
 *     void *perfdata_payload;
 * }
 * }
 */
public class git_checkout_options {

    git_checkout_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("checkout_strategy"),
        git2.C_INT.withName("disable_filters"),
        git2.C_INT.withName("dir_mode"),
        git2.C_INT.withName("file_mode"),
        git2.C_INT.withName("file_open_flags"),
        git2.C_INT.withName("notify_flags"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("notify_cb"),
        git2.C_POINTER.withName("notify_payload"),
        git2.C_POINTER.withName("progress_cb"),
        git2.C_POINTER.withName("progress_payload"),
        git_strarray.layout().withName("paths"),
        git2.C_POINTER.withName("baseline"),
        git2.C_POINTER.withName("baseline_index"),
        git2.C_POINTER.withName("target_directory"),
        git2.C_POINTER.withName("ancestor_label"),
        git2.C_POINTER.withName("our_label"),
        git2.C_POINTER.withName("their_label"),
        git2.C_POINTER.withName("perfdata_cb"),
        git2.C_POINTER.withName("perfdata_payload")
    ).withName("git_checkout_options");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt checkout_strategy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("checkout_strategy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int checkout_strategy
     * }
     */
    public static final OfInt checkout_strategy$layout() {
        return checkout_strategy$LAYOUT;
    }

    private static final long checkout_strategy$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int checkout_strategy
     * }
     */
    public static final long checkout_strategy$offset() {
        return checkout_strategy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int checkout_strategy
     * }
     */
    public static int checkout_strategy(MemorySegment struct) {
        return struct.get(checkout_strategy$LAYOUT, checkout_strategy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int checkout_strategy
     * }
     */
    public static void checkout_strategy(MemorySegment struct, int fieldValue) {
        struct.set(checkout_strategy$LAYOUT, checkout_strategy$OFFSET, fieldValue);
    }

    private static final OfInt disable_filters$LAYOUT = (OfInt)$LAYOUT.select(groupElement("disable_filters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int disable_filters
     * }
     */
    public static final OfInt disable_filters$layout() {
        return disable_filters$LAYOUT;
    }

    private static final long disable_filters$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int disable_filters
     * }
     */
    public static final long disable_filters$offset() {
        return disable_filters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int disable_filters
     * }
     */
    public static int disable_filters(MemorySegment struct) {
        return struct.get(disable_filters$LAYOUT, disable_filters$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int disable_filters
     * }
     */
    public static void disable_filters(MemorySegment struct, int fieldValue) {
        struct.set(disable_filters$LAYOUT, disable_filters$OFFSET, fieldValue);
    }

    private static final OfInt dir_mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dir_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int dir_mode
     * }
     */
    public static final OfInt dir_mode$layout() {
        return dir_mode$LAYOUT;
    }

    private static final long dir_mode$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int dir_mode
     * }
     */
    public static final long dir_mode$offset() {
        return dir_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int dir_mode
     * }
     */
    public static int dir_mode(MemorySegment struct) {
        return struct.get(dir_mode$LAYOUT, dir_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int dir_mode
     * }
     */
    public static void dir_mode(MemorySegment struct, int fieldValue) {
        struct.set(dir_mode$LAYOUT, dir_mode$OFFSET, fieldValue);
    }

    private static final OfInt file_mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("file_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int file_mode
     * }
     */
    public static final OfInt file_mode$layout() {
        return file_mode$LAYOUT;
    }

    private static final long file_mode$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int file_mode
     * }
     */
    public static final long file_mode$offset() {
        return file_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int file_mode
     * }
     */
    public static int file_mode(MemorySegment struct) {
        return struct.get(file_mode$LAYOUT, file_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int file_mode
     * }
     */
    public static void file_mode(MemorySegment struct, int fieldValue) {
        struct.set(file_mode$LAYOUT, file_mode$OFFSET, fieldValue);
    }

    private static final OfInt file_open_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("file_open_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int file_open_flags
     * }
     */
    public static final OfInt file_open_flags$layout() {
        return file_open_flags$LAYOUT;
    }

    private static final long file_open_flags$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int file_open_flags
     * }
     */
    public static final long file_open_flags$offset() {
        return file_open_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int file_open_flags
     * }
     */
    public static int file_open_flags(MemorySegment struct) {
        return struct.get(file_open_flags$LAYOUT, file_open_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int file_open_flags
     * }
     */
    public static void file_open_flags(MemorySegment struct, int fieldValue) {
        struct.set(file_open_flags$LAYOUT, file_open_flags$OFFSET, fieldValue);
    }

    private static final OfInt notify_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("notify_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int notify_flags
     * }
     */
    public static final OfInt notify_flags$layout() {
        return notify_flags$LAYOUT;
    }

    private static final long notify_flags$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int notify_flags
     * }
     */
    public static final long notify_flags$offset() {
        return notify_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int notify_flags
     * }
     */
    public static int notify_flags(MemorySegment struct) {
        return struct.get(notify_flags$LAYOUT, notify_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int notify_flags
     * }
     */
    public static void notify_flags(MemorySegment struct, int fieldValue) {
        struct.set(notify_flags$LAYOUT, notify_flags$OFFSET, fieldValue);
    }

    private static final AddressLayout notify_cb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("notify_cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_checkout_notify_cb notify_cb
     * }
     */
    public static final AddressLayout notify_cb$layout() {
        return notify_cb$LAYOUT;
    }

    private static final long notify_cb$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_checkout_notify_cb notify_cb
     * }
     */
    public static final long notify_cb$offset() {
        return notify_cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_checkout_notify_cb notify_cb
     * }
     */
    public static MemorySegment notify_cb(MemorySegment struct) {
        return struct.get(notify_cb$LAYOUT, notify_cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_checkout_notify_cb notify_cb
     * }
     */
    public static void notify_cb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(notify_cb$LAYOUT, notify_cb$OFFSET, fieldValue);
    }

    private static final AddressLayout notify_payload$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("notify_payload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *notify_payload
     * }
     */
    public static final AddressLayout notify_payload$layout() {
        return notify_payload$LAYOUT;
    }

    private static final long notify_payload$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *notify_payload
     * }
     */
    public static final long notify_payload$offset() {
        return notify_payload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *notify_payload
     * }
     */
    public static MemorySegment notify_payload(MemorySegment struct) {
        return struct.get(notify_payload$LAYOUT, notify_payload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *notify_payload
     * }
     */
    public static void notify_payload(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(notify_payload$LAYOUT, notify_payload$OFFSET, fieldValue);
    }

    private static final AddressLayout progress_cb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("progress_cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_checkout_progress_cb progress_cb
     * }
     */
    public static final AddressLayout progress_cb$layout() {
        return progress_cb$LAYOUT;
    }

    private static final long progress_cb$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_checkout_progress_cb progress_cb
     * }
     */
    public static final long progress_cb$offset() {
        return progress_cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_checkout_progress_cb progress_cb
     * }
     */
    public static MemorySegment progress_cb(MemorySegment struct) {
        return struct.get(progress_cb$LAYOUT, progress_cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_checkout_progress_cb progress_cb
     * }
     */
    public static void progress_cb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(progress_cb$LAYOUT, progress_cb$OFFSET, fieldValue);
    }

    private static final AddressLayout progress_payload$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("progress_payload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *progress_payload
     * }
     */
    public static final AddressLayout progress_payload$layout() {
        return progress_payload$LAYOUT;
    }

    private static final long progress_payload$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *progress_payload
     * }
     */
    public static final long progress_payload$offset() {
        return progress_payload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *progress_payload
     * }
     */
    public static MemorySegment progress_payload(MemorySegment struct) {
        return struct.get(progress_payload$LAYOUT, progress_payload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *progress_payload
     * }
     */
    public static void progress_payload(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(progress_payload$LAYOUT, progress_payload$OFFSET, fieldValue);
    }

    private static final GroupLayout paths$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("paths"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_strarray paths
     * }
     */
    public static final GroupLayout paths$layout() {
        return paths$LAYOUT;
    }

    private static final long paths$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_strarray paths
     * }
     */
    public static final long paths$offset() {
        return paths$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_strarray paths
     * }
     */
    public static MemorySegment paths(MemorySegment struct) {
        return struct.asSlice(paths$OFFSET, paths$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_strarray paths
     * }
     */
    public static void paths(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, paths$OFFSET, paths$LAYOUT.byteSize());
    }

    private static final AddressLayout baseline$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("baseline"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_tree *baseline
     * }
     */
    public static final AddressLayout baseline$layout() {
        return baseline$LAYOUT;
    }

    private static final long baseline$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_tree *baseline
     * }
     */
    public static final long baseline$offset() {
        return baseline$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_tree *baseline
     * }
     */
    public static MemorySegment baseline(MemorySegment struct) {
        return struct.get(baseline$LAYOUT, baseline$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_tree *baseline
     * }
     */
    public static void baseline(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(baseline$LAYOUT, baseline$OFFSET, fieldValue);
    }

    private static final AddressLayout baseline_index$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("baseline_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_index *baseline_index
     * }
     */
    public static final AddressLayout baseline_index$layout() {
        return baseline_index$LAYOUT;
    }

    private static final long baseline_index$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_index *baseline_index
     * }
     */
    public static final long baseline_index$offset() {
        return baseline_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_index *baseline_index
     * }
     */
    public static MemorySegment baseline_index(MemorySegment struct) {
        return struct.get(baseline_index$LAYOUT, baseline_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_index *baseline_index
     * }
     */
    public static void baseline_index(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(baseline_index$LAYOUT, baseline_index$OFFSET, fieldValue);
    }

    private static final AddressLayout target_directory$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("target_directory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *target_directory
     * }
     */
    public static final AddressLayout target_directory$layout() {
        return target_directory$LAYOUT;
    }

    private static final long target_directory$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *target_directory
     * }
     */
    public static final long target_directory$offset() {
        return target_directory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *target_directory
     * }
     */
    public static MemorySegment target_directory(MemorySegment struct) {
        return struct.get(target_directory$LAYOUT, target_directory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *target_directory
     * }
     */
    public static void target_directory(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(target_directory$LAYOUT, target_directory$OFFSET, fieldValue);
    }

    private static final AddressLayout ancestor_label$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ancestor_label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *ancestor_label
     * }
     */
    public static final AddressLayout ancestor_label$layout() {
        return ancestor_label$LAYOUT;
    }

    private static final long ancestor_label$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *ancestor_label
     * }
     */
    public static final long ancestor_label$offset() {
        return ancestor_label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *ancestor_label
     * }
     */
    public static MemorySegment ancestor_label(MemorySegment struct) {
        return struct.get(ancestor_label$LAYOUT, ancestor_label$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *ancestor_label
     * }
     */
    public static void ancestor_label(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ancestor_label$LAYOUT, ancestor_label$OFFSET, fieldValue);
    }

    private static final AddressLayout our_label$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("our_label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *our_label
     * }
     */
    public static final AddressLayout our_label$layout() {
        return our_label$LAYOUT;
    }

    private static final long our_label$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *our_label
     * }
     */
    public static final long our_label$offset() {
        return our_label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *our_label
     * }
     */
    public static MemorySegment our_label(MemorySegment struct) {
        return struct.get(our_label$LAYOUT, our_label$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *our_label
     * }
     */
    public static void our_label(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(our_label$LAYOUT, our_label$OFFSET, fieldValue);
    }

    private static final AddressLayout their_label$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("their_label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *their_label
     * }
     */
    public static final AddressLayout their_label$layout() {
        return their_label$LAYOUT;
    }

    private static final long their_label$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *their_label
     * }
     */
    public static final long their_label$offset() {
        return their_label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *their_label
     * }
     */
    public static MemorySegment their_label(MemorySegment struct) {
        return struct.get(their_label$LAYOUT, their_label$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *their_label
     * }
     */
    public static void their_label(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(their_label$LAYOUT, their_label$OFFSET, fieldValue);
    }

    private static final AddressLayout perfdata_cb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("perfdata_cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_checkout_perfdata_cb perfdata_cb
     * }
     */
    public static final AddressLayout perfdata_cb$layout() {
        return perfdata_cb$LAYOUT;
    }

    private static final long perfdata_cb$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_checkout_perfdata_cb perfdata_cb
     * }
     */
    public static final long perfdata_cb$offset() {
        return perfdata_cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_checkout_perfdata_cb perfdata_cb
     * }
     */
    public static MemorySegment perfdata_cb(MemorySegment struct) {
        return struct.get(perfdata_cb$LAYOUT, perfdata_cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_checkout_perfdata_cb perfdata_cb
     * }
     */
    public static void perfdata_cb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(perfdata_cb$LAYOUT, perfdata_cb$OFFSET, fieldValue);
    }

    private static final AddressLayout perfdata_payload$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("perfdata_payload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *perfdata_payload
     * }
     */
    public static final AddressLayout perfdata_payload$layout() {
        return perfdata_payload$LAYOUT;
    }

    private static final long perfdata_payload$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *perfdata_payload
     * }
     */
    public static final long perfdata_payload$offset() {
        return perfdata_payload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *perfdata_payload
     * }
     */
    public static MemorySegment perfdata_payload(MemorySegment struct) {
        return struct.get(perfdata_payload$LAYOUT, perfdata_payload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *perfdata_payload
     * }
     */
    public static void perfdata_payload(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(perfdata_payload$LAYOUT, perfdata_payload$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

