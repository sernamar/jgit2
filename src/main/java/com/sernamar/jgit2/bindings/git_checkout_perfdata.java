// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     size_t mkdir_calls;
 *     size_t stat_calls;
 *     size_t chmod_calls;
 * }
 * }
 */
public class git_checkout_perfdata {

    git_checkout_perfdata() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_LONG.withName("mkdir_calls"),
        git2.C_LONG.withName("stat_calls"),
        git2.C_LONG.withName("chmod_calls")
    ).withName("$anon$258:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong mkdir_calls$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mkdir_calls"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t mkdir_calls
     * }
     */
    public static final OfLong mkdir_calls$layout() {
        return mkdir_calls$LAYOUT;
    }

    private static final long mkdir_calls$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t mkdir_calls
     * }
     */
    public static final long mkdir_calls$offset() {
        return mkdir_calls$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t mkdir_calls
     * }
     */
    public static long mkdir_calls(MemorySegment struct) {
        return struct.get(mkdir_calls$LAYOUT, mkdir_calls$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t mkdir_calls
     * }
     */
    public static void mkdir_calls(MemorySegment struct, long fieldValue) {
        struct.set(mkdir_calls$LAYOUT, mkdir_calls$OFFSET, fieldValue);
    }

    private static final OfLong stat_calls$LAYOUT = (OfLong)$LAYOUT.select(groupElement("stat_calls"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t stat_calls
     * }
     */
    public static final OfLong stat_calls$layout() {
        return stat_calls$LAYOUT;
    }

    private static final long stat_calls$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t stat_calls
     * }
     */
    public static final long stat_calls$offset() {
        return stat_calls$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t stat_calls
     * }
     */
    public static long stat_calls(MemorySegment struct) {
        return struct.get(stat_calls$LAYOUT, stat_calls$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t stat_calls
     * }
     */
    public static void stat_calls(MemorySegment struct, long fieldValue) {
        struct.set(stat_calls$LAYOUT, stat_calls$OFFSET, fieldValue);
    }

    private static final OfLong chmod_calls$LAYOUT = (OfLong)$LAYOUT.select(groupElement("chmod_calls"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t chmod_calls
     * }
     */
    public static final OfLong chmod_calls$layout() {
        return chmod_calls$LAYOUT;
    }

    private static final long chmod_calls$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t chmod_calls
     * }
     */
    public static final long chmod_calls$offset() {
        return chmod_calls$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t chmod_calls
     * }
     */
    public static long chmod_calls(MemorySegment struct) {
        return struct.get(chmod_calls$LAYOUT, chmod_calls$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t chmod_calls
     * }
     */
    public static void chmod_calls(MemorySegment struct, long fieldValue) {
        struct.set(chmod_calls$LAYOUT, chmod_calls$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

