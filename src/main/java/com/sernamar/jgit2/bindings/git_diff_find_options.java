// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int version;
 *     uint32_t flags;
 *     uint16_t rename_threshold;
 *     uint16_t rename_from_rewrite_threshold;
 *     uint16_t copy_threshold;
 *     uint16_t break_rewrite_threshold;
 *     size_t rename_limit;
 *     git_diff_similarity_metric *metric;
 * }
 * }
 */
public class git_diff_find_options {

    git_diff_find_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("flags"),
        git2.C_SHORT.withName("rename_threshold"),
        git2.C_SHORT.withName("rename_from_rewrite_threshold"),
        git2.C_SHORT.withName("copy_threshold"),
        git2.C_SHORT.withName("break_rewrite_threshold"),
        git2.C_LONG.withName("rename_limit"),
        git2.C_POINTER.withName("metric")
    ).withName("$anon$774:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfShort rename_threshold$LAYOUT = (OfShort)$LAYOUT.select(groupElement("rename_threshold"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t rename_threshold
     * }
     */
    public static final OfShort rename_threshold$layout() {
        return rename_threshold$LAYOUT;
    }

    private static final long rename_threshold$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t rename_threshold
     * }
     */
    public static final long rename_threshold$offset() {
        return rename_threshold$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t rename_threshold
     * }
     */
    public static short rename_threshold(MemorySegment struct) {
        return struct.get(rename_threshold$LAYOUT, rename_threshold$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t rename_threshold
     * }
     */
    public static void rename_threshold(MemorySegment struct, short fieldValue) {
        struct.set(rename_threshold$LAYOUT, rename_threshold$OFFSET, fieldValue);
    }

    private static final OfShort rename_from_rewrite_threshold$LAYOUT = (OfShort)$LAYOUT.select(groupElement("rename_from_rewrite_threshold"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t rename_from_rewrite_threshold
     * }
     */
    public static final OfShort rename_from_rewrite_threshold$layout() {
        return rename_from_rewrite_threshold$LAYOUT;
    }

    private static final long rename_from_rewrite_threshold$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t rename_from_rewrite_threshold
     * }
     */
    public static final long rename_from_rewrite_threshold$offset() {
        return rename_from_rewrite_threshold$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t rename_from_rewrite_threshold
     * }
     */
    public static short rename_from_rewrite_threshold(MemorySegment struct) {
        return struct.get(rename_from_rewrite_threshold$LAYOUT, rename_from_rewrite_threshold$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t rename_from_rewrite_threshold
     * }
     */
    public static void rename_from_rewrite_threshold(MemorySegment struct, short fieldValue) {
        struct.set(rename_from_rewrite_threshold$LAYOUT, rename_from_rewrite_threshold$OFFSET, fieldValue);
    }

    private static final OfShort copy_threshold$LAYOUT = (OfShort)$LAYOUT.select(groupElement("copy_threshold"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t copy_threshold
     * }
     */
    public static final OfShort copy_threshold$layout() {
        return copy_threshold$LAYOUT;
    }

    private static final long copy_threshold$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t copy_threshold
     * }
     */
    public static final long copy_threshold$offset() {
        return copy_threshold$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t copy_threshold
     * }
     */
    public static short copy_threshold(MemorySegment struct) {
        return struct.get(copy_threshold$LAYOUT, copy_threshold$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t copy_threshold
     * }
     */
    public static void copy_threshold(MemorySegment struct, short fieldValue) {
        struct.set(copy_threshold$LAYOUT, copy_threshold$OFFSET, fieldValue);
    }

    private static final OfShort break_rewrite_threshold$LAYOUT = (OfShort)$LAYOUT.select(groupElement("break_rewrite_threshold"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t break_rewrite_threshold
     * }
     */
    public static final OfShort break_rewrite_threshold$layout() {
        return break_rewrite_threshold$LAYOUT;
    }

    private static final long break_rewrite_threshold$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t break_rewrite_threshold
     * }
     */
    public static final long break_rewrite_threshold$offset() {
        return break_rewrite_threshold$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t break_rewrite_threshold
     * }
     */
    public static short break_rewrite_threshold(MemorySegment struct) {
        return struct.get(break_rewrite_threshold$LAYOUT, break_rewrite_threshold$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t break_rewrite_threshold
     * }
     */
    public static void break_rewrite_threshold(MemorySegment struct, short fieldValue) {
        struct.set(break_rewrite_threshold$LAYOUT, break_rewrite_threshold$OFFSET, fieldValue);
    }

    private static final OfLong rename_limit$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rename_limit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t rename_limit
     * }
     */
    public static final OfLong rename_limit$layout() {
        return rename_limit$LAYOUT;
    }

    private static final long rename_limit$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t rename_limit
     * }
     */
    public static final long rename_limit$offset() {
        return rename_limit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t rename_limit
     * }
     */
    public static long rename_limit(MemorySegment struct) {
        return struct.get(rename_limit$LAYOUT, rename_limit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t rename_limit
     * }
     */
    public static void rename_limit(MemorySegment struct, long fieldValue) {
        struct.set(rename_limit$LAYOUT, rename_limit$OFFSET, fieldValue);
    }

    private static final AddressLayout metric$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("metric"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_diff_similarity_metric *metric
     * }
     */
    public static final AddressLayout metric$layout() {
        return metric$LAYOUT;
    }

    private static final long metric$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_diff_similarity_metric *metric
     * }
     */
    public static final long metric$offset() {
        return metric$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_diff_similarity_metric *metric
     * }
     */
    public static MemorySegment metric(MemorySegment struct) {
        return struct.get(metric$LAYOUT, metric$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_diff_similarity_metric *metric
     * }
     */
    public static void metric(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(metric$LAYOUT, metric$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

