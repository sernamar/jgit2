// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int version;
 *     git_proxy_t type;
 *     const char *url;
 *     git_credential_acquire_cb credentials;
 *     git_transport_certificate_check_cb certificate_check;
 *     void *payload;
 * }
 * }
 */
public class git_proxy_options {

    git_proxy_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("type"),
        git2.C_POINTER.withName("url"),
        git2.C_POINTER.withName("credentials"),
        git2.C_POINTER.withName("certificate_check"),
        git2.C_POINTER.withName("payload")
    ).withName("$anon$50:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_proxy_t type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_proxy_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_proxy_t type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_proxy_t type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final AddressLayout url$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("url"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *url
     * }
     */
    public static final AddressLayout url$layout() {
        return url$LAYOUT;
    }

    private static final long url$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *url
     * }
     */
    public static final long url$offset() {
        return url$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *url
     * }
     */
    public static MemorySegment url(MemorySegment struct) {
        return struct.get(url$LAYOUT, url$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *url
     * }
     */
    public static void url(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(url$LAYOUT, url$OFFSET, fieldValue);
    }

    private static final AddressLayout credentials$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("credentials"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_credential_acquire_cb credentials
     * }
     */
    public static final AddressLayout credentials$layout() {
        return credentials$LAYOUT;
    }

    private static final long credentials$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_credential_acquire_cb credentials
     * }
     */
    public static final long credentials$offset() {
        return credentials$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_credential_acquire_cb credentials
     * }
     */
    public static MemorySegment credentials(MemorySegment struct) {
        return struct.get(credentials$LAYOUT, credentials$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_credential_acquire_cb credentials
     * }
     */
    public static void credentials(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(credentials$LAYOUT, credentials$OFFSET, fieldValue);
    }

    private static final AddressLayout certificate_check$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("certificate_check"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_transport_certificate_check_cb certificate_check
     * }
     */
    public static final AddressLayout certificate_check$layout() {
        return certificate_check$LAYOUT;
    }

    private static final long certificate_check$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_transport_certificate_check_cb certificate_check
     * }
     */
    public static final long certificate_check$offset() {
        return certificate_check$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_transport_certificate_check_cb certificate_check
     * }
     */
    public static MemorySegment certificate_check(MemorySegment struct) {
        return struct.get(certificate_check$LAYOUT, certificate_check$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_transport_certificate_check_cb certificate_check
     * }
     */
    public static void certificate_check(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(certificate_check$LAYOUT, certificate_check$OFFSET, fieldValue);
    }

    private static final AddressLayout payload$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("payload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static final AddressLayout payload$layout() {
        return payload$LAYOUT;
    }

    private static final long payload$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static final long payload$offset() {
        return payload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static MemorySegment payload(MemorySegment struct) {
        return struct.get(payload$LAYOUT, payload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static void payload(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(payload$LAYOUT, payload$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

