// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int version;
 *     uint32_t flags;
 *     unsigned int rename_threshold;
 *     unsigned int target_limit;
 *     git_diff_similarity_metric *metric;
 *     unsigned int recursion_limit;
 *     const char *default_driver;
 *     git_merge_file_favor_t file_favor;
 *     uint32_t file_flags;
 * }
 * }
 */
public class git_merge_options {

    git_merge_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("flags"),
        git2.C_INT.withName("rename_threshold"),
        git2.C_INT.withName("target_limit"),
        git2.C_POINTER.withName("metric"),
        git2.C_INT.withName("recursion_limit"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("default_driver"),
        git2.C_INT.withName("file_favor"),
        git2.C_INT.withName("file_flags")
    ).withName("$anon$274:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt rename_threshold$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rename_threshold"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int rename_threshold
     * }
     */
    public static final OfInt rename_threshold$layout() {
        return rename_threshold$LAYOUT;
    }

    private static final long rename_threshold$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int rename_threshold
     * }
     */
    public static final long rename_threshold$offset() {
        return rename_threshold$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int rename_threshold
     * }
     */
    public static int rename_threshold(MemorySegment struct) {
        return struct.get(rename_threshold$LAYOUT, rename_threshold$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int rename_threshold
     * }
     */
    public static void rename_threshold(MemorySegment struct, int fieldValue) {
        struct.set(rename_threshold$LAYOUT, rename_threshold$OFFSET, fieldValue);
    }

    private static final OfInt target_limit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("target_limit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int target_limit
     * }
     */
    public static final OfInt target_limit$layout() {
        return target_limit$LAYOUT;
    }

    private static final long target_limit$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int target_limit
     * }
     */
    public static final long target_limit$offset() {
        return target_limit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int target_limit
     * }
     */
    public static int target_limit(MemorySegment struct) {
        return struct.get(target_limit$LAYOUT, target_limit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int target_limit
     * }
     */
    public static void target_limit(MemorySegment struct, int fieldValue) {
        struct.set(target_limit$LAYOUT, target_limit$OFFSET, fieldValue);
    }

    private static final AddressLayout metric$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("metric"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_diff_similarity_metric *metric
     * }
     */
    public static final AddressLayout metric$layout() {
        return metric$LAYOUT;
    }

    private static final long metric$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_diff_similarity_metric *metric
     * }
     */
    public static final long metric$offset() {
        return metric$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_diff_similarity_metric *metric
     * }
     */
    public static MemorySegment metric(MemorySegment struct) {
        return struct.get(metric$LAYOUT, metric$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_diff_similarity_metric *metric
     * }
     */
    public static void metric(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(metric$LAYOUT, metric$OFFSET, fieldValue);
    }

    private static final OfInt recursion_limit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("recursion_limit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int recursion_limit
     * }
     */
    public static final OfInt recursion_limit$layout() {
        return recursion_limit$LAYOUT;
    }

    private static final long recursion_limit$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int recursion_limit
     * }
     */
    public static final long recursion_limit$offset() {
        return recursion_limit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int recursion_limit
     * }
     */
    public static int recursion_limit(MemorySegment struct) {
        return struct.get(recursion_limit$LAYOUT, recursion_limit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int recursion_limit
     * }
     */
    public static void recursion_limit(MemorySegment struct, int fieldValue) {
        struct.set(recursion_limit$LAYOUT, recursion_limit$OFFSET, fieldValue);
    }

    private static final AddressLayout default_driver$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("default_driver"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *default_driver
     * }
     */
    public static final AddressLayout default_driver$layout() {
        return default_driver$LAYOUT;
    }

    private static final long default_driver$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *default_driver
     * }
     */
    public static final long default_driver$offset() {
        return default_driver$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *default_driver
     * }
     */
    public static MemorySegment default_driver(MemorySegment struct) {
        return struct.get(default_driver$LAYOUT, default_driver$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *default_driver
     * }
     */
    public static void default_driver(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(default_driver$LAYOUT, default_driver$OFFSET, fieldValue);
    }

    private static final OfInt file_favor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("file_favor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_merge_file_favor_t file_favor
     * }
     */
    public static final OfInt file_favor$layout() {
        return file_favor$LAYOUT;
    }

    private static final long file_favor$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_merge_file_favor_t file_favor
     * }
     */
    public static final long file_favor$offset() {
        return file_favor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_merge_file_favor_t file_favor
     * }
     */
    public static int file_favor(MemorySegment struct) {
        return struct.get(file_favor$LAYOUT, file_favor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_merge_file_favor_t file_favor
     * }
     */
    public static void file_favor(MemorySegment struct, int fieldValue) {
        struct.set(file_favor$LAYOUT, file_favor$OFFSET, fieldValue);
    }

    private static final OfInt file_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("file_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t file_flags
     * }
     */
    public static final OfInt file_flags$layout() {
        return file_flags$LAYOUT;
    }

    private static final long file_flags$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t file_flags
     * }
     */
    public static final long file_flags$offset() {
        return file_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t file_flags
     * }
     */
    public static int file_flags(MemorySegment struct) {
        return struct.get(file_flags$LAYOUT, file_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t file_flags
     * }
     */
    public static void file_flags(MemorySegment struct, int fieldValue) {
        struct.set(file_flags$LAYOUT, file_flags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

