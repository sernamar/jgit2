// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int version;
 *     const char *ancestor_label;
 *     const char *our_label;
 *     const char *their_label;
 *     git_merge_file_favor_t favor;
 *     uint32_t flags;
 *     unsigned short marker_size;
 * }
 * }
 */
public class git_merge_file_options {

    git_merge_file_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("ancestor_label"),
        git2.C_POINTER.withName("our_label"),
        git2.C_POINTER.withName("their_label"),
        git2.C_INT.withName("favor"),
        git2.C_INT.withName("flags"),
        git2.C_SHORT.withName("marker_size"),
        MemoryLayout.paddingLayout(6)
    ).withName("$anon$195:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final AddressLayout ancestor_label$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ancestor_label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *ancestor_label
     * }
     */
    public static final AddressLayout ancestor_label$layout() {
        return ancestor_label$LAYOUT;
    }

    private static final long ancestor_label$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *ancestor_label
     * }
     */
    public static final long ancestor_label$offset() {
        return ancestor_label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *ancestor_label
     * }
     */
    public static MemorySegment ancestor_label(MemorySegment struct) {
        return struct.get(ancestor_label$LAYOUT, ancestor_label$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *ancestor_label
     * }
     */
    public static void ancestor_label(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ancestor_label$LAYOUT, ancestor_label$OFFSET, fieldValue);
    }

    private static final AddressLayout our_label$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("our_label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *our_label
     * }
     */
    public static final AddressLayout our_label$layout() {
        return our_label$LAYOUT;
    }

    private static final long our_label$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *our_label
     * }
     */
    public static final long our_label$offset() {
        return our_label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *our_label
     * }
     */
    public static MemorySegment our_label(MemorySegment struct) {
        return struct.get(our_label$LAYOUT, our_label$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *our_label
     * }
     */
    public static void our_label(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(our_label$LAYOUT, our_label$OFFSET, fieldValue);
    }

    private static final AddressLayout their_label$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("their_label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *their_label
     * }
     */
    public static final AddressLayout their_label$layout() {
        return their_label$LAYOUT;
    }

    private static final long their_label$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *their_label
     * }
     */
    public static final long their_label$offset() {
        return their_label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *their_label
     * }
     */
    public static MemorySegment their_label(MemorySegment struct) {
        return struct.get(their_label$LAYOUT, their_label$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *their_label
     * }
     */
    public static void their_label(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(their_label$LAYOUT, their_label$OFFSET, fieldValue);
    }

    private static final OfInt favor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("favor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_merge_file_favor_t favor
     * }
     */
    public static final OfInt favor$layout() {
        return favor$LAYOUT;
    }

    private static final long favor$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_merge_file_favor_t favor
     * }
     */
    public static final long favor$offset() {
        return favor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_merge_file_favor_t favor
     * }
     */
    public static int favor(MemorySegment struct) {
        return struct.get(favor$LAYOUT, favor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_merge_file_favor_t favor
     * }
     */
    public static void favor(MemorySegment struct, int fieldValue) {
        struct.set(favor$LAYOUT, favor$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfShort marker_size$LAYOUT = (OfShort)$LAYOUT.select(groupElement("marker_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short marker_size
     * }
     */
    public static final OfShort marker_size$layout() {
        return marker_size$LAYOUT;
    }

    private static final long marker_size$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short marker_size
     * }
     */
    public static final long marker_size$offset() {
        return marker_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short marker_size
     * }
     */
    public static short marker_size(MemorySegment struct) {
        return struct.get(marker_size$LAYOUT, marker_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short marker_size
     * }
     */
    public static void marker_size(MemorySegment struct, short fieldValue) {
        struct.set(marker_size$LAYOUT, marker_size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

