// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     int (*file_signature)(void **, const git_diff_file *, const char *, void *);
 *     int (*buffer_signature)(void **, const git_diff_file *, const char *, size_t, void *);
 *     void (*free_signature)(void *, void *);
 *     int (*similarity)(int *, void *, void *, void *);
 *     void *payload;
 * }
 * }
 */
public class git_diff_similarity_metric {

    git_diff_similarity_metric() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_POINTER.withName("file_signature"),
        git2.C_POINTER.withName("buffer_signature"),
        git2.C_POINTER.withName("free_signature"),
        git2.C_POINTER.withName("similarity"),
        git2.C_POINTER.withName("payload")
    ).withName("$anon$757:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * int (*file_signature)(void **, const git_diff_file *, const char *, void *)
     * }
     */
    public static class file_signature {

        file_signature() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            git2.C_INT,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(file_signature.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(file_signature.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout file_signature$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("file_signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*file_signature)(void **, const git_diff_file *, const char *, void *)
     * }
     */
    public static final AddressLayout file_signature$layout() {
        return file_signature$LAYOUT;
    }

    private static final long file_signature$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*file_signature)(void **, const git_diff_file *, const char *, void *)
     * }
     */
    public static final long file_signature$offset() {
        return file_signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*file_signature)(void **, const git_diff_file *, const char *, void *)
     * }
     */
    public static MemorySegment file_signature(MemorySegment struct) {
        return struct.get(file_signature$LAYOUT, file_signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*file_signature)(void **, const git_diff_file *, const char *, void *)
     * }
     */
    public static void file_signature(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(file_signature$LAYOUT, file_signature$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*buffer_signature)(void **, const git_diff_file *, const char *, size_t, void *)
     * }
     */
    public static class buffer_signature {

        buffer_signature() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, long _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            git2.C_INT,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_LONG,
            git2.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(buffer_signature.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(buffer_signature.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, long _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout buffer_signature$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer_signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*buffer_signature)(void **, const git_diff_file *, const char *, size_t, void *)
     * }
     */
    public static final AddressLayout buffer_signature$layout() {
        return buffer_signature$LAYOUT;
    }

    private static final long buffer_signature$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*buffer_signature)(void **, const git_diff_file *, const char *, size_t, void *)
     * }
     */
    public static final long buffer_signature$offset() {
        return buffer_signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*buffer_signature)(void **, const git_diff_file *, const char *, size_t, void *)
     * }
     */
    public static MemorySegment buffer_signature(MemorySegment struct) {
        return struct.get(buffer_signature$LAYOUT, buffer_signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*buffer_signature)(void **, const git_diff_file *, const char *, size_t, void *)
     * }
     */
    public static void buffer_signature(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer_signature$LAYOUT, buffer_signature$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*free_signature)(void *, void *)
     * }
     */
    public static class free_signature {

        free_signature() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            git2.C_POINTER,
            git2.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(free_signature.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(free_signature.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout free_signature$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free_signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*free_signature)(void *, void *)
     * }
     */
    public static final AddressLayout free_signature$layout() {
        return free_signature$LAYOUT;
    }

    private static final long free_signature$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*free_signature)(void *, void *)
     * }
     */
    public static final long free_signature$offset() {
        return free_signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*free_signature)(void *, void *)
     * }
     */
    public static MemorySegment free_signature(MemorySegment struct) {
        return struct.get(free_signature$LAYOUT, free_signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*free_signature)(void *, void *)
     * }
     */
    public static void free_signature(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free_signature$LAYOUT, free_signature$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*similarity)(int *, void *, void *, void *)
     * }
     */
    public static class similarity {

        similarity() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            git2.C_INT,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(similarity.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(similarity.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout similarity$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("similarity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*similarity)(int *, void *, void *, void *)
     * }
     */
    public static final AddressLayout similarity$layout() {
        return similarity$LAYOUT;
    }

    private static final long similarity$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*similarity)(int *, void *, void *, void *)
     * }
     */
    public static final long similarity$offset() {
        return similarity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*similarity)(int *, void *, void *, void *)
     * }
     */
    public static MemorySegment similarity(MemorySegment struct) {
        return struct.get(similarity$LAYOUT, similarity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*similarity)(int *, void *, void *, void *)
     * }
     */
    public static void similarity(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(similarity$LAYOUT, similarity$OFFSET, fieldValue);
    }

    private static final AddressLayout payload$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("payload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static final AddressLayout payload$layout() {
        return payload$LAYOUT;
    }

    private static final long payload$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static final long payload$offset() {
        return payload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static MemorySegment payload(MemorySegment struct) {
        return struct.get(payload$LAYOUT, payload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *payload
     * }
     */
    public static void payload(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(payload$LAYOUT, payload$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

