// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct git_index_entry {
 *     git_index_time ctime;
 *     git_index_time mtime;
 *     uint32_t dev;
 *     uint32_t ino;
 *     uint32_t mode;
 *     uint32_t uid;
 *     uint32_t gid;
 *     uint32_t file_size;
 *     git_oid id;
 *     uint16_t flags;
 *     uint16_t flags_extended;
 *     const char *path;
 * }
 * }
 */
public class git_index_entry {

    git_index_entry() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git_index_time.layout().withName("ctime"),
        git_index_time.layout().withName("mtime"),
        git2.C_INT.withName("dev"),
        git2.C_INT.withName("ino"),
        git2.C_INT.withName("mode"),
        git2.C_INT.withName("uid"),
        git2.C_INT.withName("gid"),
        git2.C_INT.withName("file_size"),
        git_oid.layout().withName("id"),
        git2.C_SHORT.withName("flags"),
        git2.C_SHORT.withName("flags_extended"),
        git2.C_POINTER.withName("path")
    ).withName("git_index_entry");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ctime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ctime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_index_time ctime
     * }
     */
    public static final GroupLayout ctime$layout() {
        return ctime$LAYOUT;
    }

    private static final long ctime$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_index_time ctime
     * }
     */
    public static final long ctime$offset() {
        return ctime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_index_time ctime
     * }
     */
    public static MemorySegment ctime(MemorySegment struct) {
        return struct.asSlice(ctime$OFFSET, ctime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_index_time ctime
     * }
     */
    public static void ctime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ctime$OFFSET, ctime$LAYOUT.byteSize());
    }

    private static final GroupLayout mtime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("mtime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_index_time mtime
     * }
     */
    public static final GroupLayout mtime$layout() {
        return mtime$LAYOUT;
    }

    private static final long mtime$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_index_time mtime
     * }
     */
    public static final long mtime$offset() {
        return mtime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_index_time mtime
     * }
     */
    public static MemorySegment mtime(MemorySegment struct) {
        return struct.asSlice(mtime$OFFSET, mtime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_index_time mtime
     * }
     */
    public static void mtime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mtime$OFFSET, mtime$LAYOUT.byteSize());
    }

    private static final OfInt dev$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t dev
     * }
     */
    public static final OfInt dev$layout() {
        return dev$LAYOUT;
    }

    private static final long dev$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t dev
     * }
     */
    public static final long dev$offset() {
        return dev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t dev
     * }
     */
    public static int dev(MemorySegment struct) {
        return struct.get(dev$LAYOUT, dev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t dev
     * }
     */
    public static void dev(MemorySegment struct, int fieldValue) {
        struct.set(dev$LAYOUT, dev$OFFSET, fieldValue);
    }

    private static final OfInt ino$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ino"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t ino
     * }
     */
    public static final OfInt ino$layout() {
        return ino$LAYOUT;
    }

    private static final long ino$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t ino
     * }
     */
    public static final long ino$offset() {
        return ino$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t ino
     * }
     */
    public static int ino(MemorySegment struct) {
        return struct.get(ino$LAYOUT, ino$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t ino
     * }
     */
    public static void ino(MemorySegment struct, int fieldValue) {
        struct.set(ino$LAYOUT, ino$OFFSET, fieldValue);
    }

    private static final OfInt mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t mode
     * }
     */
    public static final OfInt mode$layout() {
        return mode$LAYOUT;
    }

    private static final long mode$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t mode
     * }
     */
    public static final long mode$offset() {
        return mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t mode
     * }
     */
    public static int mode(MemorySegment struct) {
        return struct.get(mode$LAYOUT, mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t mode
     * }
     */
    public static void mode(MemorySegment struct, int fieldValue) {
        struct.set(mode$LAYOUT, mode$OFFSET, fieldValue);
    }

    private static final OfInt uid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t uid
     * }
     */
    public static final OfInt uid$layout() {
        return uid$LAYOUT;
    }

    private static final long uid$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t uid
     * }
     */
    public static final long uid$offset() {
        return uid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t uid
     * }
     */
    public static int uid(MemorySegment struct) {
        return struct.get(uid$LAYOUT, uid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t uid
     * }
     */
    public static void uid(MemorySegment struct, int fieldValue) {
        struct.set(uid$LAYOUT, uid$OFFSET, fieldValue);
    }

    private static final OfInt gid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("gid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t gid
     * }
     */
    public static final OfInt gid$layout() {
        return gid$LAYOUT;
    }

    private static final long gid$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t gid
     * }
     */
    public static final long gid$offset() {
        return gid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t gid
     * }
     */
    public static int gid(MemorySegment struct) {
        return struct.get(gid$LAYOUT, gid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t gid
     * }
     */
    public static void gid(MemorySegment struct, int fieldValue) {
        struct.set(gid$LAYOUT, gid$OFFSET, fieldValue);
    }

    private static final OfInt file_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("file_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t file_size
     * }
     */
    public static final OfInt file_size$layout() {
        return file_size$LAYOUT;
    }

    private static final long file_size$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t file_size
     * }
     */
    public static final long file_size$offset() {
        return file_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t file_size
     * }
     */
    public static int file_size(MemorySegment struct) {
        return struct.get(file_size$LAYOUT, file_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t file_size
     * }
     */
    public static void file_size(MemorySegment struct, int fieldValue) {
        struct.set(file_size$LAYOUT, file_size$OFFSET, fieldValue);
    }

    private static final GroupLayout id$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_oid id
     * }
     */
    public static final GroupLayout id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_oid id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_oid id
     * }
     */
    public static MemorySegment id(MemorySegment struct) {
        return struct.asSlice(id$OFFSET, id$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_oid id
     * }
     */
    public static void id(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, id$OFFSET, id$LAYOUT.byteSize());
    }

    private static final OfShort flags$LAYOUT = (OfShort)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t flags
     * }
     */
    public static final OfShort flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t flags
     * }
     */
    public static short flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t flags
     * }
     */
    public static void flags(MemorySegment struct, short fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfShort flags_extended$LAYOUT = (OfShort)$LAYOUT.select(groupElement("flags_extended"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t flags_extended
     * }
     */
    public static final OfShort flags_extended$layout() {
        return flags_extended$LAYOUT;
    }

    private static final long flags_extended$OFFSET = 62;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t flags_extended
     * }
     */
    public static final long flags_extended$offset() {
        return flags_extended$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t flags_extended
     * }
     */
    public static short flags_extended(MemorySegment struct) {
        return struct.get(flags_extended$LAYOUT, flags_extended$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t flags_extended
     * }
     */
    public static void flags_extended(MemorySegment struct, short fieldValue) {
        struct.set(flags_extended$LAYOUT, flags_extended$OFFSET, fieldValue);
    }

    private static final AddressLayout path$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *path
     * }
     */
    public static final AddressLayout path$layout() {
        return path$LAYOUT;
    }

    private static final long path$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *path
     * }
     */
    public static final long path$offset() {
        return path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *path
     * }
     */
    public static MemorySegment path(MemorySegment struct) {
        return struct.get(path$LAYOUT, path$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *path
     * }
     */
    public static void path(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(path$LAYOUT, path$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

