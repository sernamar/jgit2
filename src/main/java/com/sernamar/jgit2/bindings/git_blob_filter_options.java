// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     int version;
 *     uint32_t flags;
 *     git_oid *commit_id;
 *     git_oid attr_commit_id;
 * }
 * }
 */
public class git_blob_filter_options {

    git_blob_filter_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("flags"),
        git2.C_POINTER.withName("commit_id"),
        git_oid.layout().withName("attr_commit_id"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$144:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final AddressLayout commit_id$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("commit_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_oid *commit_id
     * }
     */
    public static final AddressLayout commit_id$layout() {
        return commit_id$LAYOUT;
    }

    private static final long commit_id$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_oid *commit_id
     * }
     */
    public static final long commit_id$offset() {
        return commit_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_oid *commit_id
     * }
     */
    public static MemorySegment commit_id(MemorySegment struct) {
        return struct.get(commit_id$LAYOUT, commit_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_oid *commit_id
     * }
     */
    public static void commit_id(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(commit_id$LAYOUT, commit_id$OFFSET, fieldValue);
    }

    private static final GroupLayout attr_commit_id$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("attr_commit_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_oid attr_commit_id
     * }
     */
    public static final GroupLayout attr_commit_id$layout() {
        return attr_commit_id$LAYOUT;
    }

    private static final long attr_commit_id$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_oid attr_commit_id
     * }
     */
    public static final long attr_commit_id$offset() {
        return attr_commit_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_oid attr_commit_id
     * }
     */
    public static MemorySegment attr_commit_id(MemorySegment struct) {
        return struct.asSlice(attr_commit_id$OFFSET, attr_commit_id$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_oid attr_commit_id
     * }
     */
    public static void attr_commit_id(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, attr_commit_id$OFFSET, attr_commit_id$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

