// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct git_odb_writepack {
 *     git_odb_backend *backend;
 *     int (*append)(git_odb_writepack *, const void *, size_t, git_indexer_progress *);
 *     int (*commit)(git_odb_writepack *, git_indexer_progress *);
 *     void (*free)(git_odb_writepack *);
 * }
 * }
 */
public class git_odb_writepack {

    git_odb_writepack() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_POINTER.withName("backend"),
        git2.C_POINTER.withName("append"),
        git2.C_POINTER.withName("commit"),
        git2.C_POINTER.withName("free")
    ).withName("git_odb_writepack");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout backend$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("backend"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_odb_backend *backend
     * }
     */
    public static final AddressLayout backend$layout() {
        return backend$LAYOUT;
    }

    private static final long backend$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_odb_backend *backend
     * }
     */
    public static final long backend$offset() {
        return backend$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_odb_backend *backend
     * }
     */
    public static MemorySegment backend(MemorySegment struct) {
        return struct.get(backend$LAYOUT, backend$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_odb_backend *backend
     * }
     */
    public static void backend(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(backend$LAYOUT, backend$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*append)(git_odb_writepack *, const void *, size_t, git_indexer_progress *)
     * }
     */
    public static class append {

        append() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            git2.C_INT,
            git2.C_POINTER,
            git2.C_POINTER,
            git2.C_LONG,
            git2.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(append.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(append.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout append$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("append"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*append)(git_odb_writepack *, const void *, size_t, git_indexer_progress *)
     * }
     */
    public static final AddressLayout append$layout() {
        return append$LAYOUT;
    }

    private static final long append$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*append)(git_odb_writepack *, const void *, size_t, git_indexer_progress *)
     * }
     */
    public static final long append$offset() {
        return append$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*append)(git_odb_writepack *, const void *, size_t, git_indexer_progress *)
     * }
     */
    public static MemorySegment append(MemorySegment struct) {
        return struct.get(append$LAYOUT, append$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*append)(git_odb_writepack *, const void *, size_t, git_indexer_progress *)
     * }
     */
    public static void append(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(append$LAYOUT, append$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*commit)(git_odb_writepack *, git_indexer_progress *)
     * }
     */
    public static class commit {

        commit() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            git2.C_INT,
            git2.C_POINTER,
            git2.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(commit.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(commit.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout commit$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("commit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*commit)(git_odb_writepack *, git_indexer_progress *)
     * }
     */
    public static final AddressLayout commit$layout() {
        return commit$LAYOUT;
    }

    private static final long commit$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*commit)(git_odb_writepack *, git_indexer_progress *)
     * }
     */
    public static final long commit$offset() {
        return commit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*commit)(git_odb_writepack *, git_indexer_progress *)
     * }
     */
    public static MemorySegment commit(MemorySegment struct) {
        return struct.get(commit$LAYOUT, commit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*commit)(git_odb_writepack *, git_indexer_progress *)
     * }
     */
    public static void commit(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(commit$LAYOUT, commit$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*free)(git_odb_writepack *)
     * }
     */
    public static class free {

        free() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            git2.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = git2.upcallHandle(free.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(free.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*free)(git_odb_writepack *)
     * }
     */
    public static final AddressLayout free$layout() {
        return free$LAYOUT;
    }

    private static final long free$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*free)(git_odb_writepack *)
     * }
     */
    public static final long free$offset() {
        return free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*free)(git_odb_writepack *)
     * }
     */
    public static MemorySegment free(MemorySegment struct) {
        return struct.get(free$LAYOUT, free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*free)(git_odb_writepack *)
     * }
     */
    public static void free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free$LAYOUT, free$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

