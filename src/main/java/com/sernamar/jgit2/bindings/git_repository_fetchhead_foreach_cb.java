// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * typedef int (*git_repository_fetchhead_foreach_cb)(const char *, const char *, const git_oid *, unsigned int, void *)
 * }
 */
public class git_repository_fetchhead_foreach_cb {

    git_repository_fetchhead_foreach_cb() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        int apply(MemorySegment ref_name, MemorySegment remote_url, MemorySegment oid, int is_merge, MemorySegment payload);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
        git2.C_INT,
        git2.C_POINTER,
        git2.C_POINTER,
        git2.C_POINTER,
        git2.C_INT,
        git2.C_POINTER
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = git2.upcallHandle(git_repository_fetchhead_foreach_cb.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(git_repository_fetchhead_foreach_cb.Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static int invoke(MemorySegment funcPtr,MemorySegment ref_name, MemorySegment remote_url, MemorySegment oid, int is_merge, MemorySegment payload) {
        try {
            return (int) DOWN$MH.invokeExact(funcPtr, ref_name, remote_url, oid, is_merge, payload);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}

