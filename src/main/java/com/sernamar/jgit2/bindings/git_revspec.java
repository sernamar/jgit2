// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     git_object *from;
 *     git_object *to;
 *     unsigned int flags;
 * }
 * }
 */
public class git_revspec {

    git_revspec() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_POINTER.withName("from"),
        git2.C_POINTER.withName("to"),
        git2.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$83:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout from$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("from"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_object *from
     * }
     */
    public static final AddressLayout from$layout() {
        return from$LAYOUT;
    }

    private static final long from$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_object *from
     * }
     */
    public static final long from$offset() {
        return from$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_object *from
     * }
     */
    public static MemorySegment from(MemorySegment struct) {
        return struct.get(from$LAYOUT, from$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_object *from
     * }
     */
    public static void from(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(from$LAYOUT, from$OFFSET, fieldValue);
    }

    private static final AddressLayout to$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("to"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * git_object *to
     * }
     */
    public static final AddressLayout to$layout() {
        return to$LAYOUT;
    }

    private static final long to$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * git_object *to
     * }
     */
    public static final long to$offset() {
        return to$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * git_object *to
     * }
     */
    public static MemorySegment to(MemorySegment struct) {
        return struct.get(to$LAYOUT, to$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * git_object *to
     * }
     */
    public static void to(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(to$LAYOUT, to$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

