// Generated by jextract

package com.sernamar.jgit2.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned int version;
 *     uint32_t flags;
 *     uint32_t mode;
 *     const char *workdir_path;
 *     const char *description;
 *     const char *template_path;
 *     const char *initial_head;
 *     const char *origin_url;
 * }
 * }
 */
public class git_repository_init_options {

    git_repository_init_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        git2.C_INT.withName("version"),
        git2.C_INT.withName("flags"),
        git2.C_INT.withName("mode"),
        MemoryLayout.paddingLayout(4),
        git2.C_POINTER.withName("workdir_path"),
        git2.C_POINTER.withName("description"),
        git2.C_POINTER.withName("template_path"),
        git2.C_POINTER.withName("initial_head"),
        git2.C_POINTER.withName("origin_url")
    ).withName("$anon$328:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t mode
     * }
     */
    public static final OfInt mode$layout() {
        return mode$LAYOUT;
    }

    private static final long mode$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t mode
     * }
     */
    public static final long mode$offset() {
        return mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t mode
     * }
     */
    public static int mode(MemorySegment struct) {
        return struct.get(mode$LAYOUT, mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t mode
     * }
     */
    public static void mode(MemorySegment struct, int fieldValue) {
        struct.set(mode$LAYOUT, mode$OFFSET, fieldValue);
    }

    private static final AddressLayout workdir_path$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("workdir_path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *workdir_path
     * }
     */
    public static final AddressLayout workdir_path$layout() {
        return workdir_path$LAYOUT;
    }

    private static final long workdir_path$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *workdir_path
     * }
     */
    public static final long workdir_path$offset() {
        return workdir_path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *workdir_path
     * }
     */
    public static MemorySegment workdir_path(MemorySegment struct) {
        return struct.get(workdir_path$LAYOUT, workdir_path$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *workdir_path
     * }
     */
    public static void workdir_path(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(workdir_path$LAYOUT, workdir_path$OFFSET, fieldValue);
    }

    private static final AddressLayout description$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static final AddressLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.get(description$LAYOUT, description$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(description$LAYOUT, description$OFFSET, fieldValue);
    }

    private static final AddressLayout template_path$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("template_path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *template_path
     * }
     */
    public static final AddressLayout template_path$layout() {
        return template_path$LAYOUT;
    }

    private static final long template_path$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *template_path
     * }
     */
    public static final long template_path$offset() {
        return template_path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *template_path
     * }
     */
    public static MemorySegment template_path(MemorySegment struct) {
        return struct.get(template_path$LAYOUT, template_path$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *template_path
     * }
     */
    public static void template_path(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(template_path$LAYOUT, template_path$OFFSET, fieldValue);
    }

    private static final AddressLayout initial_head$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("initial_head"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *initial_head
     * }
     */
    public static final AddressLayout initial_head$layout() {
        return initial_head$LAYOUT;
    }

    private static final long initial_head$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *initial_head
     * }
     */
    public static final long initial_head$offset() {
        return initial_head$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *initial_head
     * }
     */
    public static MemorySegment initial_head(MemorySegment struct) {
        return struct.get(initial_head$LAYOUT, initial_head$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *initial_head
     * }
     */
    public static void initial_head(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(initial_head$LAYOUT, initial_head$OFFSET, fieldValue);
    }

    private static final AddressLayout origin_url$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("origin_url"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *origin_url
     * }
     */
    public static final AddressLayout origin_url$layout() {
        return origin_url$LAYOUT;
    }

    private static final long origin_url$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *origin_url
     * }
     */
    public static final long origin_url$offset() {
        return origin_url$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *origin_url
     * }
     */
    public static MemorySegment origin_url(MemorySegment struct) {
        return struct.get(origin_url$LAYOUT, origin_url$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *origin_url
     * }
     */
    public static void origin_url(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(origin_url$LAYOUT, origin_url$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

