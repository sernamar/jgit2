** jgit2                                                           :noexport:
Java Foreign Function & Memory bindings for [[https://libgit2.org/][libgit2]].
** Table of contents                                                  :TOC_3:
  - [[#requirements][Requirements]]
  - [[#java-bindings][Java bindings]]
  - [[#usage-examples][Usage examples]]
    - [[#initialize-a-repo-and-create-commits][Initialize a repo and create commits]]
  - [[#license][License]]

** Requirements
To use this library, you must have =libgit2= installed on your system.

Make sure that the shared library (=libgit2.so= on Linux, =libgit2.dylib= on macOS, or =git2.dll= on Windows) is available in your library search path.  
** Java bindings
Java bindings were generated using [[https://github.com/openjdk/jextract][jextract]] by running the following command from the project root:
#+begin_src sh
  export LIBGIT2_HOME=/tmp/libgit2-1.9.0
  export JEXTRACT_HOME=/tmp/jextract-22

  ${JEXTRACT_HOME}/bin/jextract \
        --output src/main/java \
        --target-package com.sernamar.jgit2.bindings \
        --header-class-name git2 \
        --library :${LIBGIT2_HOME}/build/libgit2.so \
        --include-dir ${LIBGIT2_HOME}/include \
        ${LIBGIT2_HOME}/include/git2.h
#+end_src
** Usage examples
*** Initialize a repo and create commits
#+begin_src java
  package com.sernamar.examples;

  import com.sernamar.jgit2.*;

  import java.io.IOException;
  import java.nio.file.Files;
  import java.nio.file.Paths;

  import static com.sernamar.jgit2.Commit.gitCommitCreateV;
  import static com.sernamar.jgit2.Commit.gitCommitLookup;
  import static com.sernamar.jgit2.Global.gitLibgit2Init;
  import static com.sernamar.jgit2.Global.gitLibgit2Shutdown;
  import static com.sernamar.jgit2.Index.*;
  import static com.sernamar.jgit2.Message.gitMessagePrettify;
  import static com.sernamar.jgit2.Refs.gitReferenceNameToId;
  import static com.sernamar.jgit2.Repository.gitRepositoryIndex;
  import static com.sernamar.jgit2.Repository.gitRepositoryInit;
  import static com.sernamar.jgit2.Signature.gitSignatureNow;
  import static com.sernamar.jgit2.Tree.gitTreeLookup;

  public class CreateCommits {
      private static final String PATH = "/tmp/repo";
      private static final String NAME = "sernamar";
      private static final String EMAIL = "sernamar@protonmail.com";

      private static void createCommit(GitRepository repo, GitTree tree, GitCommit parentCommit, String message) {
          try (GitSignature signature = gitSignatureNow(NAME, EMAIL)) {
              GitOid commitId = (parentCommit == null)
                  ? gitCommitCreateV(repo, "HEAD", signature, signature, null, gitMessagePrettify(message), tree)
                  : gitCommitCreateV(repo, "HEAD", signature, signature, null, gitMessagePrettify(message), tree, parentCommit);
              System.out.println("Commit ID: " + commitId);
          }
      }

      public static void main(String[] args) {
          gitLibgit2Init();
          try (GitRepository repo = gitRepositoryInit(PATH);
               GitIndex index = gitRepositoryIndex(repo)) {
              // Create initial commit
              GitOid treeId = gitIndexWriteTree(index);
              try (GitTree tree = gitTreeLookup(repo, treeId)) {
                  createCommit(repo, tree, null, "Initial commit");
              }

              // Create hello.txt file and add it to the index
              String filename = "hello.txt";
              String content = "Hello, World!";
              try {
                  Files.write(Paths.get(PATH, filename), content.getBytes());
              } catch (IOException e) {
                  throw new RuntimeException(e);
              }
              gitIndexAddByPath(index, filename);
              gitIndexWrite(index);

              // Create another commit
              treeId = gitIndexWriteTree(index);
              try (GitTree tree = gitTreeLookup(repo, treeId)) {
                  GitOid referenceId = gitReferenceNameToId(repo, "HEAD");
                  assert referenceId != null;
                  try (GitCommit parentCommit = gitCommitLookup(repo, referenceId)) {
                      createCommit(repo, tree, parentCommit, "Add hello.txt");
                  }
              }
          }
          gitLibgit2Shutdown();
      }
  }
#+end_src
** License
Copyright Â© 2025 Sergio Navarro

Distributed under the [[https://opensource.org/licenses/mit][MIT License]].
